document.addEventListener('DOMContentLoaded', () => {
  showSlides();
  setupChat();
  // setupFAQ();
});

// Hi·ªÉn th·ªã slideshow
let slideIndex = [0, 0];
const slideColumns = document.querySelectorAll('.slideshow-column');

function showSlides() {
  slideColumns.forEach((column, i) => {
    const slides = column.getElementsByClassName('mySlides');
    for (let j = 0; j < slides.length; j++) {
      slides[j].style.display = 'none';
    }
    slideIndex[i]++;
    if (slideIndex[i] > slides.length) slideIndex[i] = 1;
    slides[slideIndex[i] - 1].style.display = 'block';
  });
  setTimeout(showSlides, 3000);
}

// ƒê·ªãnh d·∫°ng gi√°
function formatPrice(price) {
  return new Intl.NumberFormat('vi-VN').format(price);
}

// ƒê·ªãnh d·∫°ng ng√†y
function formatDate(dateString) {
  const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
  return new Date(dateString).toLocaleDateString('vi-VN', options);
}

// B·∫£o v·ªá ch·ªëng XSS
function escapeHtml(unsafe) {
  if (typeof unsafe !== 'string') return '';
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

// T·∫£i n·ªôi dung trang
function loadContent(url) {
  console.log('ƒêang t·∫£i:', url);
  fetch(url, {
    headers: {
      'Content-Type': 'application/json; charset=utf-8'
    }
  })
    .then(response => {
      if (!response.ok) {
        console.error(`L·ªói HTTP: ${response.status}`);
        window.location.href = url;
        throw new Error(`HTTP error: ${response.status}`);
      }
      return response.text();
    })
    .then(html => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const newContainer = doc.querySelector('.container');
      if (newContainer) {
        document.querySelector('.container').innerHTML = newContainer.innerHTML;
        history.pushState({}, '', url);
        if (typeof fetchAndDisplayProducts === 'function') fetchAndDisplayProducts();
        if (typeof fetchAndDisplayPromotions === 'function') fetchAndDisplayPromotions();
        if (typeof fetchAndDisplayTextbooks === 'function') fetchAndDisplayTextbooks();
      } else {
        console.error('Kh√¥ng t√¨m th·∫•y .container, chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp');
        window.location.href = url;
      }
    })
    .catch(error => {
      console.error('L·ªói khi t·∫£i n·ªôi dung:', error);
      window.location.href = url;
    });
}

// Danh s√°ch t·ª´ kh√≥a FAQ
const FAQ_KEYWORDS = [
  'ƒë·∫∑t h√†ng', 'mua s√°ch', 'thanh to√°n',
  'ƒë·ªïi tr·∫£', 'ho√†n h√†ng', 'ch√≠nh s√°ch', 'ho√†n ti·ªÅn',
  'li√™n h·ªá', 'h·ªó tr·ª£', 'hotline',
  'theo d√µi', 'ƒë∆°n h√†ng', 'tracking'
];

// Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i FAQ kh√¥ng
function isFAQQuestion(message) {
  const lowerMessage = message.toLowerCase().replace(/\s+/g, ' ').trim();
  console.log('Ki·ªÉm tra t·ª´ kh√≥a FAQ cho c√¢u h·ªèi:', lowerMessage);
  const matched = FAQ_KEYWORDS.some(keyword => {
    const keywordMatch = lowerMessage.includes(keyword.toLowerCase());
    console.log(`T·ª´ kh√≥a "${keyword}": ${keywordMatch}`);
    return keywordMatch;
  });
  console.log('L√† c√¢u h·ªèi FAQ:', matched);
  return matched;
}

// X·ª≠ l√Ω FAQ trong chat
async function handleFAQInChat(message, chatMessages) {
  try {
    const words = message.toLowerCase().split(/\s+/);
    const keywordToSend = words.find(word => FAQ_KEYWORDS.includes(word.toLowerCase())) || message;
    console.log('G·ª≠i t·ª´ kh√≥a FAQ:', keywordToSend);

    const response = await fetch(`http://localhost:5000/api/support/faq?keyword=${encodeURIComponent(keywordToSend)}`, {
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      }
    });
    if (!response.ok) {
      throw new Error(`L·ªói khi t·∫£i FAQ: ${response.status}`);
    }
    const data = await response.json();
    console.log('Ph·∫£n h·ªìi FAQ API:', data);

    if (!data.faqs || data.faqs.length === 0) {
      addMessage('ai', 'Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p cho c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ t·ª´ kh√≥a kh√°c ho·∫∑c li√™n h·ªá h·ªó tr·ª£!');
      return;
    }

    let replyContent = 'D·ª±a tr√™n c√¢u h·ªèi c·ªßa b·∫°n, ƒë√¢y l√† th√¥ng tin h·ªó tr·ª£:\n\n';
    data.faqs.forEach(faq => {
      replyContent += `**${escapeHtml(faq.question)}**\n${escapeHtml(faq.answer)}\n\n*Danh m·ª•c: ${escapeHtml(faq.category || 'Ch∆∞a ph√¢n lo·∫°i')}*\n*T·ª´ kh√≥a: ${faq.keywords ? faq.keywords.map(k => escapeHtml(k)).join(', ') : 'Kh√¥ng c√≥'}*\n\n`;
    });

    addMessage('ai', replyContent);
  } catch (error) {
    console.error('L·ªói FAQ trong chat:', error);
    addMessage('ai', 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm th√¥ng tin h·ªó tr·ª£. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

// **PH·∫¶N CHAT AI - ƒê√É VI·∫æT L·∫†I HO√ÄN TO√ÄN**
function setupChat() {
  const chatIcon = document.getElementById('chat-icon');
  const chatModal = document.getElementById('chat-modal');
  const chatClose = document.querySelector('.chat-close');
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const chatMessages = document.getElementById('chat-messages');
  const productSuggestion = document.getElementById('product-suggestion');

  if (!chatIcon || !chatModal || !chatForm || !chatInput || !chatMessages) {
    console.error('Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠ chat c·∫ßn thi·∫øt');
    return;
  }

  // Th√™m tin nh·∫Øn ch√†o m·ª´ng khi m·ªü chat
  function addWelcomeMessage() {
    if (chatMessages.children.length === 0) {
      addMessage('ai', 'üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng s√°ch.\n\nüí° T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m ki·∫øm s√°ch theo t√™n, t√°c gi·∫£\n‚Ä¢ T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p\n‚Ä¢ Th√¥ng tin gi√° c·∫£, khuy·∫øn m√£i\n‚Ä¢ Gi·∫£i ƒë√°p c√¢u h·ªèi v·ªÅ s√°ch\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën bi·∫øt! üìö');
    }
  }

  // M·ªü modal khi nh·∫•n icon chat
  chatIcon.addEventListener('click', () => {
    chatModal.style.display = 'block';
    addWelcomeMessage();
    chatInput.focus();
    scrollToBottom(chatMessages);
  });

  // ƒê√≥ng modal
  if (chatClose) {
    chatClose.addEventListener('click', () => {
      closeChat();
    });
  }

  // ƒê√≥ng modal khi nh·∫•n b√™n ngo√†i
  window.addEventListener('click', (event) => {
    if (event.target === chatModal) {
      closeChat();
    }
  });

  // X·ª≠ l√Ω ph√≠m t·∫Øt
  chatInput.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeChat();
    }
  });

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await handleSendMessage();
  });

  // H√†m x·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  async function handleSendMessage() {
    const message = chatInput.value.trim();
    if (!message) {
      showInputError('Vui l√≤ng nh·∫≠p c√¢u h·ªèi!');
      return;
    }

    // Promo/code quick path: if user asks for promotions show codes directly
    const promoTrigger = /m√£ khuy·∫øn m√£i|ma khuyen mai|khuy·∫øn m√£i|khuyen mai|m√£ gi·∫£m gi√°|voucher|code/iu;
    if (promoTrigger.test(message)) {
      try {
        await renderPromotionsInChat();
      } catch (err) {
        console.error('L·ªói khi l·∫•y khuy·∫øn m√£i:', err);
        addMessage('ai', 'Xin l·ªói, kh√¥ng th·ªÉ t·∫£i m√£ khuy·∫øn m√£i ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
      chatInput.value = '';
      return;
    }

    // ·∫®n g·ª£i √Ω s·∫£n ph·∫©m c≈©
    hideProductSuggestion();

    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    addMessage('user', message);
    
    // Reset form v√† disable ƒë·ªÉ tr√°nh spam
    chatInput.value = '';
    setFormState(false);

    // Hi·ªÉn th·ªã typing indicator
    const typingId = showTypingIndicator();

    try {
      // G·ª≠i y√™u c·∫ßu ƒë·∫øn API
      const response = await fetch('http://localhost:5000/api/openai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ message })
      });

      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì• Ph·∫£n h·ªìi t·ª´ AI:', data);

      // X√≥a typing indicator
      removeTypingIndicator(typingId);

      const reply = data.reply || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i!';
      
      // Th√™m ph·∫£n h·ªìi AI v·ªõi hi·ªáu ·ª©ng typing
      await addMessageWithTyping('ai', reply);

      // N·∫øu server tr·∫£ v·ªÅ contact object (v√≠ d·ª• Zalo), hi·ªÉn th·ªã n√∫t/QR
      if (data.contact) {
        try {
          renderContactInChat(data.contact);
        } catch (err) {
          console.error('L·ªói khi hi·ªÉn th·ªã contact:', err);
        }
      }

      // X·ª≠ l√Ω g·ª£i √Ω s·∫£n ph·∫©m n·∫øu c√≥
      const productInfo = extractProductFromReply(reply);
      if (productInfo) {
        await showProductSuggestionWithDelay(productInfo);
      }

      // N·∫øu server kh√¥ng tr·∫£ v·ªÅ contact nh∆∞ng c√¢u tr·∫£ l·ªùi c√≥ t·ª´ kh√≥a li√™n h·ªá/Zalo,
      // t·ª± ƒë·ªông hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng/n√∫t Zalo ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫•n.
      if (!data.contact) {
        const contactTrigger = /zalo|li√™n h·ªá:|lien he:|\b\d{9,11}\b/i;
        if (contactTrigger.test(reply)) {
          const inferredContact = {
            type: 'zalo',
            url: 'https://zalo.me/0374170367',
            label: 'Nh·∫Øn tin qua Zalo',
            qr: '/img/zalo.png'
          };
          renderContactInChat(inferredContact);
        }
      }

    } catch (error) {
      console.error('‚ùå L·ªói chat:', error);
      removeTypingIndicator(typingId);
      
      // Ph·∫£n h·ªìi l·ªói th√¢n thi·ªán
      const errorMessage = getErrorMessage(error);
      addMessage('ai', errorMessage);
    } finally {
      setFormState(true);
      chatInput.focus();
    }
  }

  // Hi·ªÉn th·ªã typing indicator
  function showTypingIndicator() {
    const chatMessages = document.getElementById('chat-messages');
    const typingId = 'typing-' + Date.now();
    const typingDiv = document.createElement('div');
    typingDiv.classList.add('chat-message', 'ai', 'typing-indicator');
    typingDiv.id = typingId;
    typingDiv.innerHTML = `
      <div class="typing-animation">
        <span></span>
        <span></span>
        <span></span>
      </div>
      <small>AI ƒëang suy nghƒ©...</small>
    `;
    chatMessages.appendChild(typingDiv);
    scrollToBottom(chatMessages);
    return typingId;
  }

  // X√≥a typing indicator
  function removeTypingIndicator(typingId) {
    const typingElement = document.getElementById(typingId);
    if (typingElement) {
      typingElement.remove();
    }
  }

  // Th√™m tin nh·∫Øn v·ªõi hi·ªáu ·ª©ng typing
  async function addMessageWithTyping(type, text) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('chat-message', type);
    chatMessages.appendChild(messageDiv);

    // Hi·ªáu ·ª©ng typing
    const words = text.split(' ');
    let currentText = '';
    
    for (let i = 0; i < words.length; i++) {
      currentText += (i > 0 ? ' ' : '') + words[i];
      messageDiv.innerHTML = formatMessageText(currentText);
      scrollToBottom(chatMessages);
      
      // Delay gi·ªØa c√°c t·ª´ (t·ªëc ƒë·ªô typing)
      if (i < words.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 50));
      }
    }
  }

  // Format text message
  function formatMessageText(text) {
    return text
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
      .replace(/\*(.*?)\*/g, '<em>$1</em>') // Italic
      .replace(/`(.*?)`/g, '<code>$1</code>') // Code
      .replace(/(\d{1,3}(?:\.\d{3})*)\s*VNƒê/g, '<span class="price">$1 VNƒê</span>'); // Price highlight
  }

  // Hi·ªÉn th·ªã l·ªói input
  function showInputError(message) {
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
      chatInput.style.borderColor = '#e74c3c';
      chatInput.placeholder = message;
      setTimeout(() => {
        chatInput.style.borderColor = '';
        chatInput.placeholder = 'Nh·∫≠p c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m...';
      }, 2000);
      chatInput.focus();
    }
  }

  // Set tr·∫°ng th√°i form
  function setFormState(enabled) {
    const chatInput = document.getElementById('chat-input');
    const chatForm = document.getElementById('chat-form');
    
    if (chatInput) chatInput.disabled = !enabled;
    
    const submitBtn = chatForm?.querySelector('button[type="submit"]');
    if (submitBtn) {
      submitBtn.disabled = !enabled;
      submitBtn.textContent = enabled ? 'G·ª≠i' : 'ƒêang g·ª≠i...';
    }
  }

  // L·∫•y th√¥ng b√°o l·ªói th√¢n thi·ªán
  function getErrorMessage(error) {
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      return 'üîå M·∫•t k·∫øt n·ªëi v·ªõi server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i!';
    }
    if (error.message.includes('500')) {
      return '‚ö†Ô∏è Server ƒëang b·∫£o tr√¨. T√¥i s·∫Ω ho·∫°t ƒë·ªông tr·ªü l·∫°i s·ªõm nh·∫•t c√≥ th·ªÉ!';
    }
    if (error.message.includes('404')) {
      return 'üîç Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• chat. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£: 0938 424 289';
    }
    return `üòî ƒê√£ x·∫£y ra l·ªói: ${error.message}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£: 0938 424 289`;
  }

  // ƒê√≥ng chat
  function closeChat() {
    chatModal.style.display = 'none';
    hideProductSuggestion();
    chatInput.value = '';
    setFormState(true);
  }

  // Hi·ªÉn th·ªã g·ª£i √Ω s·∫£n ph·∫©m v·ªõi delay
async function showProductSuggestionWithDelay(productInfo) {
  const chatMessages = document.getElementById('chat-messages');
  await new Promise(resolve => setTimeout(resolve, 500));
  
  const suggestionMessage = document.createElement('div');
  suggestionMessage.classList.add('chat-message', 'ai', 'suggestion');
  suggestionMessage.innerHTML = `
    <h4>üéØ G·ª£i √Ω s·∫£n ph·∫©m</h4>
    <p>T√¥i ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p...</p>
  `;
  chatMessages.appendChild(suggestionMessage);
  scrollToBottom(chatMessages);

  try {
    const product = await searchProduct(productInfo);
    if (product) {
      // S·ª¨A: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√∫ng
      const imageUrl = product.HinhAnh ? 
        `img/product/${product.HinhAnh}` : 
        'img/default-book.jpg'; // ·∫¢nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥

      // S·ª¨A: Logic t√¨nh tr·∫°ng kho
      let stockStatus;
      let stockClass;
      
      // Ki·ªÉm tra t√¨nh tr·∫°ng d·ª±a tr√™n SoLuong v√† TinhTrang
      if (product.TinhTrang === 0 || product.SoLuong === 0) {
        stockStatus = 'H·∫øt h√†ng';
        stockClass = 'status-out';
      } else if (product.SoLuong > 0) {
        stockStatus = `C√≤n h√†ng (${product.SoLuong} s·∫£n ph·∫©m)`;
        stockClass = 'status-available';
      } else {
        // Fallback case
        stockStatus = product.TinhTrang === 1 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng';
        stockClass = product.TinhTrang === 1 ? 'status-available' : 'status-out';
      }

      suggestionMessage.innerHTML = `
        <h4>üìö S·∫£n ph·∫©m g·ª£i √Ω</h4>
        <div class="product-card">
          <div class="product-image">
            <img src="${imageUrl}" alt="${escapeHtml(product.TenSP || 'S·∫£n ph·∫©m')}" 
                 onerror="this.src='img/default-book.jpg'" />
          </div>
          <div class="product-info">
            <p class="product-name"><strong>${escapeHtml(product.TenSP || 'Kh√¥ng c√≥ t√™n')}</strong></p>
            <p class="product-author">üë§ T√°c gi·∫£: ${escapeHtml(product.TacGia || 'Kh√¥ng r√µ')}</p>
            <p class="product-price">üí∞ Gi√°: <span class="price">${formatPrice(product.DonGia || 0)} VNƒê</span></p>
            <p class="product-id">üè∑Ô∏è M√£ SP: ${escapeHtml(String(product.MaSP || 'N/A'))}</p>
            <p class="product-quantity">üì¶ S·ªë l∆∞·ª£ng: ${product.SoLuong || 0}</p>
            <p class="product-status">üìã T√¨nh tr·∫°ng: <span class="${stockClass}">${stockStatus}</span></p>
            <button class="view-detail-btn" onclick="loadProductDetail('${product.MaSP || product.id}')">
              üëÄ Xem chi ti·∫øt
            </button>
          </div>
        </div>
      `;
      
      // Log ƒë·ªÉ debug
      console.log('Product info:', {
        TinhTrang: product.TinhTrang,
        SoLuong: product.SoLuong,
        DisplayStatus: stockStatus
      });
      
    } else {
      suggestionMessage.innerHTML = `
        <h4>üîç Kh√¥ng t√¨m th·∫•y</h4>
        <p>R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${escapeHtml(productInfo.name || 'n√†y')}" trong kho.</p>
        <p>üí° B·∫°n c√≥ th·ªÉ th·ª≠:</p>
        <p>‚Ä¢ T√¨m v·ªõi t·ª´ kh√≥a kh√°c<br>‚Ä¢ Li√™n h·ªá: 0938 424 289<br>‚Ä¢ Duy·ªát danh m·ª•c s·∫£n ph·∫©m</p>
      `;
    }
  } catch (error) {
    console.error('L·ªói t√¨m s·∫£n ph·∫©m:', error);
    // Hide suggestion area instead of showing an error box
    suggestionMessage.style.display = 'none';
    suggestionMessage.innerHTML = '';
  }
  
  scrollToBottom(chatMessages);
}


  // T√¨m s·∫£n ph·∫©m
  async function searchProduct(productInfo) {
    let response;
    if (productInfo.type === 'id') {
      response = await fetch(`http://localhost:5000/api/product/${productInfo.value}`, {
        headers: { 'Content-Type': 'application/json; charset=utf-8' }
      });
    } else {
      response = await fetch(`http://localhost:5000/api/product/search?name=${encodeURIComponent(productInfo.name)}`, {
        headers: { 'Content-Type': 'application/json; charset=utf-8' }
      });
    }

    if (!response.ok) {
      throw new Error('L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m');
    }

    const data = await response.json();
    return productInfo.type === 'id' ? data : (data.data && data.data.length > 0 ? data.data[0] : null);
  }

  // ·∫®n g·ª£i √Ω s·∫£n ph·∫©m
  function hideProductSuggestion() {
    if (productSuggestion) {
      productSuggestion.style.display = 'none';
      productSuggestion.innerHTML = '';
    }
  }
}

// **C√ÅC H√ÄM GLOBAL - CH·ªà THAY ƒê·ªîI PH·∫¶N CHAT**

// Th√™m tin nh·∫Øn v√†o chat
function addMessage(type, text) {
  const chatMessages = document.getElementById('chat-messages');
  if (!chatMessages) return;

  const messageDiv = document.createElement('div');
  messageDiv.classList.add('chat-message', type);
  
  // Format tin nh·∫Øn
  const formattedText = text
    .replace(/\n/g, '<br>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`(.*?)`/g, '<code>$1</code>')
    .replace(/(\d{1,3}(?:\.\d{3})*)\s*VNƒê/g, '<span class="price">$1 VNƒê</span>');
  
  messageDiv.innerHTML = formattedText;
  chatMessages.appendChild(messageDiv);
  
  // Auto scroll
  scrollToBottom(chatMessages);
  
  // Animate new message
  messageDiv.style.opacity = '0';
  messageDiv.style.transform = 'translateY(10px)';
  requestAnimationFrame(() => {
    messageDiv.style.transition = 'all 0.3s ease';
    messageDiv.style.opacity = '1';
    messageDiv.style.transform = 'translateY(0)';
  });
}

// X√≥a n·ªôi dung chat
function clearChat() {
  const chatMessages = document.getElementById('chat-messages');
  const productSuggestion = document.getElementById('product-suggestion');
  if (chatMessages) chatMessages.innerHTML = '';
  if (productSuggestion) {
    productSuggestion.style.display = 'none';
    productSuggestion.innerHTML = '';
  }
}

// Cu·ªôn xu·ªëng cu·ªëi
function scrollToBottom(element) {
  if (element) {
    element.scrollTop = element.scrollHeight;
  }
}

// Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi
function extractProductFromReply(reply) {
  const idMatch = reply.match(/\[PRODUCT_ID:\s*(\d+)\]/i);
  const nameMatch = reply.match(/"([^"]+)"/i) || reply.match(/'([^']+)'/i);

  if (idMatch) {
    return { type: 'id', value: idMatch[1] };
  } else if (nameMatch) {
    return { type: 'name', name: nameMatch[1] };
  }
  return null;
}

// Render contact button and optional QR thumbnail into chat
function renderContactInChat(contact) {
  // contact: { type, url, label, qr }
  const chatMessages = document.getElementById('chat-messages');
  if (!chatMessages) return;

  const wrapper = document.createElement('div');
  wrapper.className = 'chat-contact';

  const btn = document.createElement('button');
  btn.className = 'contact-btn';
  btn.textContent = contact.label || 'Li√™n h·ªá';
  btn.onclick = () => window.open(contact.url, '_blank');
  wrapper.appendChild(btn);

  if (contact.qr) {
    // QR thumbnail removed from UI per user request.
    // If you want to re-enable the thumbnail/modal later, restore this block and ensure contact.qr points to a valid image URL.
  }

  chatMessages.appendChild(wrapper);
  scrollToBottom(chatMessages);
}

// Fetch and render active promotions (codes) into the chat
async function renderPromotionsInChat() {
  const chatMessages = document.getElementById('chat-messages');
  if (!chatMessages) return;

  const loading = document.createElement('div');
  loading.className = 'chat-message ai';
  loading.textContent = 'ƒêang t·∫£i m√£ khuy·∫øn m√£i...';
  chatMessages.appendChild(loading);
  scrollToBottom(chatMessages);

  try {
  // Use backend absolute URL so frontend served from a different origin can reach the API
  const backendBase = window.__BACKEND_URL__ || 'http://localhost:5000';
  const res = await fetch(`${backendBase}/api/khuyenmai?activeOnly=true&limit=10`, { headers: { 'Content-Type': 'application/json; charset=utf-8' } });
    if (!res.ok) throw new Error('Failed to load promotions');
    const data = await res.json();
    // data.data is expected to be an array of promotions
    const promotions = data.data || data || [];

    // Remove loading
    loading.remove();

    if (!promotions || promotions.length === 0) {
      addMessage('ai', 'Hi·ªán t·∫°i kh√¥ng c√≥ m√£ khuy·∫øn m√£i n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.');
      return;
    }

    const wrapper = document.createElement('div');
    wrapper.className = 'chat-message ai promotion-list';

    let html = '<h4>üéÅ M√£ khuy·∫øn m√£i ƒëang c√≥</h4><ul>';
    promotions.forEach(p => {
      const code = p.Code || p.code || p.MaKM || ('KM' + (p.MaKM || ''));
      const title = p.TenKM || p.Ten || 'Khuy·∫øn m√£i';
      const ma = p.MaKM || p.MaKM || '';
      html += `<li><strong>${escapeHtml(String(code))}</strong> ‚Äî ${escapeHtml(String(title))} `;
      if (ma) html += `<button class="promo-detail-btn" data-id="${escapeHtml(String(ma))}">Xem</button>`;
      html += '</li>';
    });
    html += '</ul>';

    wrapper.innerHTML = html;
    chatMessages.appendChild(wrapper);
    scrollToBottom(chatMessages);

    // Attach click handlers for detail buttons
    wrapper.querySelectorAll('.promo-detail-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = e.currentTarget.getAttribute('data-id');
        if (id) {
          // Navigate to the frontend promotions page (load giamgia.html under /GiaoDien)
          const targetUrl = `${window.location.origin}/GiaoDien/giamgia.html?id=${encodeURIComponent(id)}`;
          // Load in the same tab per user request
          window.location.href = targetUrl;
        }
      });
    });

  } catch (err) {
    loading.remove();
    console.error(err);
    addMessage('ai', 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch khuy·∫øn m√£i. Vui l√≤ng th·ª≠ l·∫°i sau.');
  }
}

// T√¨m v√† hi·ªÉn th·ªã g·ª£i √Ω s·∫£n ph·∫©m (legacy function - gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch)
async function searchAndShowProductSuggestion(productInfo) {
  const suggestionDiv = document.getElementById('product-suggestion');
  if (!suggestionDiv) return;

  try {
    let response;
    if (productInfo.type === 'id') {
      response = await fetch(`http://localhost:5000/api/product/${productInfo.value}`, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      });
    } else {
      response = await fetch(`http://localhost:5000/api/product?search=${encodeURIComponent(productInfo.name)}`, {
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      });
    }

    if (!response.ok) {
      throw new Error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m');
    }

    const data = await response.json();
    let product;
    if (productInfo.type === 'id') {
      product = data;
    } else {
      product = data.data && data.data.length > 0 ? data.data[0] : null;
    }

    if (product && product.MaSP && product.TenSP) {
      const productId = String(product.MaSP || product.id || '');
      const productName = String(product.TenSP || product.name || '');
      suggestionDiv.innerHTML = `
        <div class="product-suggestion-content">
          <div class="product-info">
            <h4>S·∫£n ph·∫©m: ${escapeHtml(productName)}</h4>
            <p>M√£ s·∫£n ph·∫©m: ${escapeHtml(productId)}</p>
          </div>
          <button class="view-detail-btn" onclick="loadProductDetail('${productId}')">Xem chi ti·∫øt</button>
        </div>
      `;
    } else {
      suggestionDiv.innerHTML = `
        <div class="product-suggestion-content">
          <h4>S·∫£n ph·∫©m g·ª£i √Ω:</h4>
          <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${escapeHtml(productInfo.name || 'kh√¥ng x√°c ƒë·ªãnh')}" l√∫c n√†y. H√£y th·ª≠ t√¨m ki·∫øm th√™m!</p>
        </div>
      `;
    }
    suggestionDiv.style.display = 'block';
    suggestionDiv.style.maxHeight = '150px';
    suggestionDiv.style.overflowY = 'auto';
    scrollToBottom(suggestionDiv);
  } catch (error) {
    console.error('L·ªói t√¨m ki·∫øm s·∫£n ph·∫©m:', error);
    // Don't display the product suggestion error UI; keep it hidden
    suggestionDiv.style.display = 'none';
    suggestionDiv.innerHTML = '';
  }
}

// Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
window.loadProductDetail = function(productId) {
  localStorage.setItem('selectedProductId', productId);
  window.location.href = 'product_detail.html';
};