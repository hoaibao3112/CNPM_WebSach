import express from 'express';
import pool from '../config/connectDatabase.js';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import { authenticateToken } from '../utils/generateToken.js';

const router = express.Router();

// Config multer ƒë·ªÉ l∆∞u file v√†o th∆∞ m·ª•c product
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = 'C:/Users/PC/Desktop/CNPM/server/backend/product/';
    console.log(`üìÇ Attempting to save file to: ${dir}`);
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    const uniqueName = Date.now() + '-' + file.originalname;
    console.log(`üìÑ Filename generated: ${uniqueName}`);
    cb(null, uniqueName);
  }
});
const upload = multer({ storage });

// Middleware ƒë·ªÉ log file nh·∫≠n ƒë∆∞·ª£c
const logFileMiddleware = (req, res, next) => {
  console.log('üì§ Received file:', req.file);
  console.log('üìã Request body:', req.body);
  next();
};

// Middleware ki·ªÉm tra quy·ªÅn admin/staff (S·ª¨A ƒê·ªÇ CHO PH√âP NV004 V√Ä NV007)
const checkAdminPermission = (req, res, next) => {
  console.log('üîç Checking permissions for user:', req.user);
  
  if (!req.user) {
    return res.status(403).json({ 
      error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin user trong token.' 
    });
  }
  
  // L·∫•y identifier t·ª´ token (c√≥ th·ªÉ l√† makh, MaTK, ho·∫∑c userId)
  const identifier = req.user.makh || req.user.MaTK || req.user.userId;
  const userType = req.user.userType;
  
  // Danh s√°ch user ƒë∆∞·ª£c ph√©p (bao g·ªìm c·∫£ string v√† number)
  const allowedUsers = ['NV004', 'NV007', '4', '7', 4, 7];
  const allowedTypes = ['admin'];
  
  // Ki·ªÉm tra quy·ªÅn
  const hasUserPermission = allowedUsers.includes(identifier);
  const hasTypePermission = allowedTypes.includes(userType);
  
  console.log('üîç Permission details:', {
    identifier,
    userType,
    hasUserPermission,
    hasTypePermission,
    fullUser: req.user
  });
  
  if (!hasUserPermission && !hasTypePermission) {
    console.log('‚ùå Access denied');
    return res.status(403).json({ 
      error: `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. User: ${identifier}, Type: ${userType}`,
      debug: {
        receivedUser: req.user,
        allowedUsers: ['NV004', 'NV007'],
        allowedTypes: ['admin', 'staff']
      }
    });
  }
  
  console.log('‚úÖ Access granted for user:', identifier, 'Type:', userType);
  next();
};

// =============================================================================
// ROUTES KH√îNG C·∫¶N TOKEN (PUBLIC) - GI·ªÆ NGUY√äN
// =============================================================================

// Tim kiem san pham theo ten hoac theo tac gia /search-product?q=keyWordSearch
router.get('/search-product', async (req, res) => {
  const keyWordSearch = req.query.search

  const sql = `
    SELECT sp.*
    FROM SanPham sp
    JOIN TacGia tg ON sp.MaTG = tg.MaTG
    WHERE sp.TenSP LIKE CONCAT('%', ?, '%')
       OR tg.TenTG LIKE CONCAT('%', ?, '%')
    LIMIT 0, 50;
  `;
  try {
    const [results] = await pool.query(sql, [keyWordSearch, keyWordSearch]);
    res.status(200).json(results);
  } catch (err) {
    console.error("L·ªói truy v·∫•n:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});

// Route t√¨m s·∫£n ph·∫©m b·∫±ng t√™n (case-insensitive, partial match)
router.get('/search', async (req, res) => {
  const { name } = req.query;
  if (!name) {
    return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m' });
  }
  
  try {
    const [products] = await pool.query(
      `SELECT s.*, m.TenTG AS TacGia 
       FROM sanpham s 
       LEFT JOIN tacgia m ON s.MaTG = m.MaTG 
       WHERE LOWER(s.TenSP) LIKE LOWER(?)`,
      [`%${name}%`]
    );

    if (products.length === 0) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
    }

    res.status(200).json(products[0]);
  } catch (error) {
    console.error('L·ªói search s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi t√¨m s·∫£n ph·∫©m', details: error.message });
  }
});

// Route l·∫•y danh s√°ch t√°c gi·∫£ cho dropdown
router.get('/authors', async (req, res) => {
  try {
    const [authors] = await pool.query('SELECT MaTG, TenTG FROM tacgia ORDER BY TenTG');
    res.status(200).json(authors);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch t√°c gi·∫£:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch t√°c gi·∫£' });
  }
});

// Route l·∫•y danh s√°ch th·ªÉ lo·∫°i cho dropdown  
router.get('/categories', async (req, res) => {
  try {
    const [categories] = await pool.query('SELECT MaTL, TenTL FROM theloai ORDER BY TenTL');
    res.status(200).json(categories);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch th·ªÉ lo·∫°i:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch th·ªÉ lo·∫°i' });
  }
});

// Route l·∫•y danh s√°ch nh√† cung c·∫•p cho dropdown
router.get('/suppliers', async (req, res) => {
  try {
    const [suppliers] = await pool.query('SELECT MaNCC, TenNCC FROM nhacungcap ORDER BY TenNCC');
    res.status(200).json(suppliers);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch nh√† cung c·∫•p' });
  }
});
// Route l·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i - th√™m route n√†y
router.get('/category/:categoryId', async (req, res) => {
  try {
    const { categoryId } = req.params;
    
    // Validate categoryId
    if (!categoryId || isNaN(categoryId)) {
      return res.status(400).json({ error: 'ID th·ªÉ lo·∫°i kh√¥ng h·ª£p l·ªá' });
    }

    // Build query and params. For category 6 (s√°ch gi√°o khoa) limit to 20 items as requested.
    let query = `
      SELECT s.*, m.TenTG AS TacGia 
      FROM sanpham s 
      LEFT JOIN tacgia m ON s.MaTG = m.MaTG 
      WHERE s.MaTL = ?
    `;
    const params = [parseInt(categoryId)];

      const cid = parseInt(categoryId);
      if (cid === 6) {
        query += ' LIMIT 20';
        console.log('Applying LIMIT 20 for category 6 (textbooks)');
      } else if (cid === 2 || cid === 4) {
        // For politics (2) and science (4) return only 10 items as requested
        query += ' LIMIT 10';
        console.log(`Applying LIMIT 10 for category ${cid}`);
    }

    const [products] = await pool.query(query, params);
    
    console.log(`S·∫£n ph·∫©m th·ªÉ lo·∫°i ${categoryId}:`, products.length);
    res.status(200).json(products);
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i:', error);
    res.status(500).json({ 
      error: 'L·ªói khi l·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i', 
      details: error.message 
    });
  }
});
// Route l·∫•y danh s√°ch s·∫£n ph·∫©m - S·ª¨A QUERY T∆Ø∆†NG T·ª∞
router.get('/', async (req, res) => {
  try {
    let query = `
      SELECT s.*, tg.TenTG AS TacGia 
      FROM sanpham s 
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
    `;
    let params = [];
    let conditions = [];

    if (req.query.MaTL) {
      conditions.push('s.MaTL = ?');
      params.push(req.query.MaTL);
    }

    // Filter by supplier(s) - supports single id or comma-separated ids
    if (req.query.MaNCC) {
      const suppliers = String(req.query.MaNCC).split(',').map(s => s.trim()).filter(Boolean);
      if (suppliers.length === 1) {
        conditions.push('s.MaNCC = ?');
        params.push(suppliers[0]);
      } else if (suppliers.length > 1) {
        const placeholders = suppliers.map(() => '?').join(',');
        conditions.push(`s.MaNCC IN (${placeholders})`);
        params.push(...suppliers);
      }
    }

    // Filter by HinhThuc (format/type) - supports single value or comma-separated values
    if (req.query.HinhThuc) {
      const types = String(req.query.HinhThuc).split(',').map(t => t.trim()).filter(Boolean);
      if (types.length === 1) {
        conditions.push('s.HinhThuc = ?');
        params.push(types[0]);
      } else if (types.length > 1) {
        const placeholders = types.map(() => '?').join(',');
        conditions.push(`s.HinhThuc IN (${placeholders})`);
        params.push(...types);
      }
    }

    // Filter by author(s) - supports single id or comma-separated ids
    if (req.query.MaTG) {
      const authors = String(req.query.MaTG).split(',').map(a => a.trim()).filter(Boolean);
      if (authors.length === 1) {
        const mtg = parseInt(authors[0]);
        if (!isNaN(mtg)) {
          conditions.push('s.MaTG = ?');
          params.push(mtg);
        }
      } else if (authors.length > 1) {
        const ids = authors.map(v => parseInt(v)).filter(v => !isNaN(v));
        if (ids.length) {
          const placeholders = ids.map(() => '?').join(',');
          conditions.push(`s.MaTG IN (${placeholders})`);
          params.push(...ids);
        }
      }
    }

    if (req.query.priceRange) {
      const [minPrice, maxPrice] = req.query.priceRange.split('-').map(Number);
      if (!isNaN(minPrice) && !isNaN(maxPrice)) {
        conditions.push('s.DonGia BETWEEN ? AND ?');
        params.push(minPrice, maxPrice);
      } else if (!isNaN(minPrice) && req.query.priceRange.includes('200000')) {
        conditions.push('s.DonGia >= ?');
        params.push(minPrice);
      }
    }

    if (conditions.length > 0) {
      query += ' WHERE ' + conditions.join(' AND ');
    }

    const [products] = await pool.query(query, params);
    console.log('üîç Products returned from DB count:', products.length);
    if (products.length > 0) {
      console.log('üîç First product TacGia:', products[0].TacGia);
    }
    res.status(200).json(products);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m', details: error.message });
  }
});

// Route l·∫•y s·∫£n ph·∫©m theo ID - S·ª¨A QUERY
// Route: l·∫•y s·∫£n ph·∫©m d∆∞·ªõi m·ª©c t·ªìn kho (public)
// NOTE: must be declared BEFORE '/:id' so the literal path 'low-stock' isn't interpreted as an id
router.get('/low-stock', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit, 10) || 100;
    const fallbackThreshold = parseInt(req.query.defaultThreshold, 10) || parseInt(process.env.DEFAULT_MIN_STOCK, 10) || 5;

    const sql = `
      SELECT MaSP, TenSP, SoLuong, DonGia,
             COALESCE(MinSoLuong, 0) AS MinSoLuong,
             (COALESCE(NULLIF(MinSoLuong,0), ?) - COALESCE(SoLuong,0)) AS Needed
      FROM sanpham
      WHERE COALESCE(NULLIF(MinSoLuong,0), ?) >= COALESCE(SoLuong,0)
      ORDER BY Needed DESC
      LIMIT ?
    `;

    const [rows] = await pool.query(sql, [fallbackThreshold, fallbackThreshold, limit]);
    res.status(200).json(rows);
  } catch (error) {
    console.error('L·ªói khi l·∫•y low-stock:', error);
    res.status(500).json({ error: 'L·ªói server' });
  }
});

// --- RECOMMENDATIONS: helper + route ---
async function getRecommendationsBySearch(makh) {
  const [searchRows] = await pool.query(
    "SELECT DISTINCT search_query FROM hanh_dong_user WHERE makhachhang = ? AND loaihanhdong = 'search' ORDER BY timestamp DESC LIMIT 5",
    [makh]
  );
  if (searchRows.length === 0) {
    return [];
  }
  const searchConditions = searchRows.map(() => 
    `(MATCH(TenSP, MoTa) AGAINST(? IN NATURAL LANGUAGE MODE))`
  ).join(' OR ');

  let searchValues = searchRows.map(row => row.search_query);

  const productSql = `
    SELECT MaSP, TenSP, HinhAnh, DonGia 
    FROM sanpham 
    WHERE ${searchConditions}  -- ƒê√£ b·ªè d·∫•u ngo·∫∑c bao quanh
    LIMIT 10
  `;
  const [products] = await pool.query(productSql, searchValues);
  return products;
}


router.get('/recommendations', async (req, res) => {
  const { makh } = req.query;

  if (!makh) {
    return res.status(400).json({ message: "Thi·∫øu makh" });
  }

  try {
    const sqlGetViewed = `
      SELECT masanpham 
      FROM hanh_dong_user 
      WHERE makhachhang = ? AND loaihanhdong = 'view'
      GROUP BY masanpham
      ORDER BY MAX(timestamp) DESC 
      LIMIT 100
    `;
        
    const [viewedRows] = await pool.query(sqlGetViewed, [makh]);
    const viewedIds = viewedRows.map(row => row.masanpham);
        
    let exclusionSql = '';
    const queryParams = [makh]; 

    if (viewedIds.length > 0) {
      exclusionSql = 'AND p2.MaSP NOT IN (?)';
      queryParams.push(viewedIds); 
    }

    const viewSql = `
      SELECT
        p2.MaSP, p2.TenSP, p2.HinhAnh, p2.DonGia,
        COUNT(p2.MaSP) AS view_frequency
      FROM
        (
          SELECT masanpham, timestamp
          FROM hanh_dong_user
          WHERE makhachhang = ? 
          AND loaihanhdong = 'view'
          ORDER BY timestamp DESC
          LIMIT 100
        ) AS ua
      JOIN
        sanpham AS p1 ON ua.masanpham = p1.MaSP 
      JOIN
        sanpham AS p2 ON p1.MaTL = p2.MaTL 
      WHERE
        p1.MaSP != p2.MaSP 
        ${exclusionSql}
      GROUP BY
        p2.MaSP, p2.TenSP, p2.HinhAnh, p2.DonGia 
      ORDER BY
        view_frequency DESC,
        MAX(ua.timestamp) DESC
      LIMIT 10;
    `;
        
    const [viewRecommendations] = await pool.query(viewSql, queryParams); 
        
    if (viewRecommendations.length > 0) {
      console.log(`(makh: ${makh}) ƒê·ªÅ xu·∫•t theo 'view': ${viewRecommendations.length} s·∫£n ph·∫©m.`);
      return res.json(viewRecommendations);
    }

    console.log(`(makh: ${makh}) Kh√¥ng c√≥ 'view', th·ª≠ ƒë·ªÅ xu·∫•t theo 'search'.`);
        
    const searchRecommendations = await getRecommendationsBySearch(makh); 

    if (searchRecommendations.length > 0) {
      console.log(`(makh: ${makh}) ƒê·ªÅ xu·∫•t theo 'search': ${searchRecommendations.length} s·∫£n ph·∫©m.`);
      return res.json(searchRecommendations);
    }
        
    console.log(`(makh: ${makh}) Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ƒë·ªÅ xu·∫•t.`);
    return res.json([]); 

  } catch (error) {
    console.error("L·ªói l·∫•y ƒë·ªÅ xu·∫•t:", error);
    res.status(500).send("L·ªói server");
  }
});


// Route: 20 s·∫£n ph·∫©m s·∫Øp x·∫øp theo NƒÉm xu·∫•t b·∫£n (th·∫•p -> cao).
// URL: GET /sorted/year
// Optional query: MaTL (category id) to filter by category
router.get('/sorted/year', async (req, res) => {
  try {
    const { MaTL } = req.query;
    let sql = `
      SELECT s.*, tg.TenTG AS TacGia
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
    `;
    const params = [];
    if (MaTL && !isNaN(MaTL)) {
      sql += ' WHERE s.MaTL = ?';
      params.push(parseInt(MaTL));
    }

    // Put NULL NamXB last, then order ascending and limit 20
    sql += ` ORDER BY (s.NamXB IS NULL), s.NamXB ASC LIMIT 20`;

    const [rows] = await pool.query(sql, params);
    res.status(200).json(rows);
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m theo nƒÉm (sorted/year):', error);
    res.status(500).json({ error: 'L·ªói server khi l·∫•y s·∫£n ph·∫©m theo nƒÉm', details: error.message });
  }
});

// Route: 20 s·∫£n ph·∫©m s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng t·ªìn kho (cao -> th·∫•p).
// URL: GET /sorted/stock
// Optional query: MaTL (category id) to filter by category
router.get('/sorted/stock', async (req, res) => {
  try {
    const { MaTL } = req.query;
    let sql = `
      SELECT s.*, tg.TenTG AS TacGia
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
    `;
    const params = [];
    if (MaTL && !isNaN(MaTL)) {
      sql += ' WHERE s.MaTL = ?';
      params.push(parseInt(MaTL));
    }

    // Order by SoLuong (NULLs treated as 0) descending and limit 20
    sql += ` ORDER BY COALESCE(s.SoLuong, 0) DESC LIMIT 20`;

    const [rows] = await pool.query(sql, params);
    res.status(200).json(rows);
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m theo t·ªìn kho (sorted/stock):', error);
    res.status(500).json({ error: 'L·ªói server khi l·∫•y s·∫£n ph·∫©m theo t·ªìn kho', details: error.message });
  }
});

// Route l·∫•y s·∫£n ph·∫©m theo ID - S·ª¨A QUERY
// Route l·∫•y chi ti·∫øt s·∫£n ph·∫©m (k·∫øt h·ª£p th√¥ng tin nh√† cung c·∫•p, t√°c gi·∫£ v√† c√°c tr∆∞·ªùng s√°ch c√≥ trong `sanpham`)
router.get('/:id', async (req, res) => {
  try {
    const id = req.params.id;

    const query = `
      SELECT s.*, tg.TenTG AS TacGia, ncc.TenNCC AS NhaCungCap
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
      LEFT JOIN nhacungcap ncc ON s.MaNCC = ncc.MaNCC
      WHERE s.MaSP = ?
      LIMIT 1;
    `;

    const [rows] = await pool.query(query, [id]);

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    const s = rows[0];

    // Normalize bit(1) / boolean field TinhTrang which may come back as Buffer for some MySQL drivers
    let tinhTrangValue = null;
    if (s.TinhTrang === null || s.TinhTrang === undefined) tinhTrangValue = null;
    else if (typeof s.TinhTrang === 'number') tinhTrangValue = s.TinhTrang ? 1 : 0;
    else if (Buffer.isBuffer(s.TinhTrang)) tinhTrangValue = s.TinhTrang[0] ? 1 : 0;
    else tinhTrangValue = s.TinhTrang ? 1 : 0;

    const product = {
      MaSP: s.MaSP,
      MaTL: s.MaTL,
      TenSP: s.TenSP,
      MoTa: s.MoTa,
      HinhAnh: s.HinhAnh,
      DonGia: s.DonGia,
      SoLuong: s.SoLuong,
      NamXB: s.NamXB,
      TinhTrang: tinhTrangValue,
      MaTG: s.MaTG,
      TacGia: s.TacGia || null,
      MaNCC: s.MaNCC,
      NhaCungCap: s.NhaCungCap || null,
      TrongLuong: s.TrongLuong,
      KichThuoc: s.KichThuoc,
      SoTrang: s.SoTrang,
      HinhThuc: s.HinhThuc
    };

    // --- L·∫•y ·∫£nh ph·ª• t·ª´ b·∫£ng sanpham_anh v√† ƒë√≠nh k√®m v√†o response ---
    try {
      const [imgs] = await pool.query(
        'SELECT Id, MaSP, FileName, SortOrder, CreatedAt, UpdatedAt FROM sanpham_anh WHERE MaSP = ? ORDER BY SortOrder ASC, Id ASC',
        [id]
      );

      // Build public URL for each image. The server serves product images at /product-images/<filename>
      const baseUrl = process.env.IMG_BASE_URL || (req.protocol + '://' + req.get('host'));
      // Map DB rows to image objects
      const imagesFromTable = imgs.map(r => ({
        id: r.Id,
        filename: r.FileName,
        sortOrder: r.SortOrder,
        createdAt: r.CreatedAt,
        updatedAt: r.UpdatedAt,
        url: r.FileName ? `${baseUrl}/product-images/${r.FileName}` : null,
        isPrimary: false
      }));

      // Ensure the main image stored in sanpham.HinhAnh is preserved as primary
      const mainFilename = s.HinhAnh && s.HinhAnh.toString().trim();
      let images = [];
      if (mainFilename) {
        // Find if mainFilename already exists in sanpham_anh
        const matchIndex = imagesFromTable.findIndex(x => x.filename === mainFilename);
        if (matchIndex !== -1) {
          imagesFromTable[matchIndex].isPrimary = true;
          // move matched to front
          const [mainImg] = imagesFromTable.splice(matchIndex, 1);
          images.push(mainImg);
        } else {
          // prepend main image object (it may be stored in sanpham.HinhAnh only)
          images.push({ id: null, filename: mainFilename, sortOrder:  -1, createdAt: null, updatedAt: null, url: `${baseUrl}/product-images/${mainFilename}`, isPrimary: true });
        }
      }

      // append other images sorted by sortOrder
      images = images.concat(imagesFromTable);

      product.images = images;
    } catch (imgErr) {
      console.warn('Kh√¥ng th·ªÉ l·∫•y ·∫£nh ph·ª• cho s·∫£n ph·∫©m', id, imgErr.message || imgErr);
      product.images = [];
    }

    res.status(200).json(product);
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m', details: error.message });
  }
});

// Route tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt r√∫t g·ªçn theo y√™u c·∫ßu (TacGia, NhaCungCap, TrongLuong, KichThuoc, SoTrang, HinhThuc, NamXB)
// ƒê·∫∑t tr∆∞·ªõc route '/:id' ƒë·ªÉ tr√°nh conflict
router.get('/:id/info', async (req, res) => {
  try {
    const id = req.params.id;

    const query = `
      SELECT s.MaSP, s.TenSP, s.NamXB AS NamXB, tg.TenTG AS TacGia, ncc.TenNCC AS NhaCungCap,
             s.TrongLuong AS TrongLuong,
             s.KichThuoc AS KichThuoc,
             s.SoTrang AS SoTrang,
             s.HinhThuc AS HinhThuc
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
      LEFT JOIN nhacungcap ncc ON s.MaNCC = ncc.MaNCC
      WHERE s.MaSP = ?
      LIMIT 1;
    `;

    const [rows] = await pool.query(query, [id]);

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    const r = rows[0];

    const response = {
      MaSP: r.MaSP,
      TenSP: r.TenSP,
      TacGia: r.TacGia || null,
      NhaCungCap: r.NhaCungCap || null,
      TrongLuong: r.TrongLuong == null ? null : Number(r.TrongLuong),
      KichThuoc: r.KichThuoc || null,
      SoTrang: r.SoTrang == null ? null : Number(r.SoTrang),
      HinhThuc: r.HinhThuc || null,
      NamXB: r.NamXB == null ? null : Number(r.NamXB)
    };

    res.status(200).json(response);
  } catch (error) {
    console.error('L·ªói khi l·∫•y info s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y info s·∫£n ph·∫©m', details: error.message });
  }
});

// Route l·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i v√† nƒÉm xu·∫•t b·∫£n hi·ªán t·∫°i
router.get('/category-current-year/:categoryId?', async (req, res) => {
  try {
    const { categoryId } = req.params;
    const currentYear = new Date().getFullYear(); // nƒÉm hi·ªán t·∫°i

    let query;
    let params;

    if (!categoryId || categoryId.toLowerCase() === 'all') {
      // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m nƒÉm hi·ªán t·∫°i
      query = `
        SELECT *
        FROM sanpham
        WHERE NamXB = ?
      `;
      params = [currentYear];
    } else if (!isNaN(categoryId)) {
      // L·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i + nƒÉm hi·ªán t·∫°i
      query = `
        SELECT *
        FROM sanpham
        WHERE MaTL = ? AND NamXB = ?
      `;
      params = [parseInt(categoryId), currentYear];
    } else {
      return res.status(400).json({ error: 'ID th·ªÉ lo·∫°i kh√¥ng h·ª£p l·ªá' });
    }

    const [products] = await pool.query(query, params);

    res.status(200).json(products);
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m theo th·ªÉ lo·∫°i v√† nƒÉm hi·ªán t·∫°i:', error);
    res.status(500).json({ error: 'L·ªói server', details: error.message });
  }
});


// =============================================================================
// ROUTES C·∫¶N TOKEN V√Ä QUY·ªÄN ADMIN/STAFF (PROTECTED)
// =============================================================================
router.post(
  '/',
  authenticateToken,
  checkAdminPermission,
  upload.fields([
    { name: 'HinhAnh', maxCount: 1 },       // ·∫£nh ch√≠nh
    { name: 'ExtraImages', maxCount: 20 }   // ·∫£nh ph·ª•
  ]),
  logFileMiddleware,
  async (req, res) => {
    let connection;
    try {
      const {
        MaTL, TenSP, MaTG, NamXB, TinhTrang, DonGia, SoLuong, MoTa,
        MaNCC, TrongLuong, KichThuoc, SoTrang, HinhThuc, MinSoLuong
      } = req.body;

      const mainFile = req.files?.HinhAnh?.[0] || null;
      const extraFiles = req.files?.ExtraImages || [];

      const maTLNumber = parseInt(MaTL);
      const maTGNumber = parseInt(MaTG);
      const namXBNumber = parseInt(NamXB);
      const maNCCNumber = parseInt(MaNCC);

      if (isNaN(maTLNumber) || !TenSP?.trim()) {
        return res.status(400).json({ error: 'Thi·∫øu M√£ th·ªÉ lo·∫°i ho·∫∑c T√™n s·∫£n ph·∫©m!' });
      }

      const tinhTrangValue = TinhTrang === '1' || TinhTrang === 1 ? 1 : 0;
      const donGiaValue = parseFloat(DonGia) || 0;
      const soLuongValue = parseInt(SoLuong) || 0;
      const minSoLuongValue = parseInt(MinSoLuong) || 0;

      const mainFilename = mainFile ? mainFile.filename : null;

      connection = await pool.getConnection();
      await connection.beginTransaction();

      // 1Ô∏è‚É£ Th√™m s·∫£n ph·∫©m v√†o b·∫£ng sanpham
      const [result] = await connection.query(
        `INSERT INTO sanpham
         (MaTL, TenSP, MoTa, HinhAnh, MaTG, NamXB, TinhTrang, DonGia, SoLuong,
          MinSoLuong, MaNCC, TrongLuong, KichThuoc, SoTrang, HinhThuc)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          maTLNumber,
          TenSP.trim(),
          MoTa || null,
          mainFilename,
          isNaN(maTGNumber) ? null : maTGNumber,
          isNaN(namXBNumber) ? null : namXBNumber,
          tinhTrangValue,
          donGiaValue,
          soLuongValue,
          minSoLuongValue,
          isNaN(maNCCNumber) ? null : maNCCNumber,
          isNaN(parseInt(TrongLuong)) ? null : parseInt(TrongLuong),
          KichThuoc || null,
          isNaN(parseInt(SoTrang)) ? null : parseInt(SoTrang),
          HinhThuc || null
        ]
      );

      const newProductId = result.insertId;

      // 2Ô∏è‚É£ Th√™m ·∫£nh ph·ª• v√†o sanpham_anh
      if (extraFiles.length > 0) {
        const values = extraFiles.map((f, idx) => [newProductId, f.filename, idx]);
        await connection.query('INSERT INTO sanpham_anh (MaSP, FileName, SortOrder) VALUES ?', [values]);
      }

      await connection.commit();
      connection.release();

      res.status(201).json({
        message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!',
        MaSP: newProductId,
        PrimaryImage: mainFilename,
        ExtraImages: extraFiles.map(f => f.filename)
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:', error.message || error);
      if (connection) {
        try { await connection.rollback(); connection.release(); } catch (e) {}
      }
      res.status(500).json({ error: 'L·ªói server khi th√™m s·∫£n ph·∫©m', details: error.message });
    }
  }
);

// Route c·∫≠p nh·∫≠t s·∫£n ph·∫©m - Y√äU C·∫¶U TOKEN V√Ä QUY·ªÄN ADMIN/STAFF/NV004/NV007
router.put('/:id', authenticateToken, checkAdminPermission, upload.fields([
  { name: 'HinhAnh', maxCount: 1 },
  { name: 'ExtraImages', maxCount: 20 }
]), async (req, res) => {
  let connection;
  try {
    const { id } = req.params;
    const {
      MaTL, TenSP, MaTG, NamXB, TinhTrang, DonGia, SoLuong, MoTa,
      MaNCC, TrongLuong, KichThuoc, SoTrang, HinhThuc, MinSoLuong
    } = req.body;

    // files (if any)
    const mainFile = req.files?.HinhAnh?.[0] || null;
    const extraFiles = req.files?.ExtraImages || [];

    const maTLNumber = parseInt(MaTL);
    const maTGNumber = parseInt(MaTG);
    const namXBNumber = parseInt(NamXB);
    const maNCCNumber = parseInt(MaNCC);

    if (isNaN(maTLNumber) || !TenSP?.trim()) {
      return res.status(400).json({ error: 'Thi·∫øu M√£ th·ªÉ lo·∫°i ho·∫∑c T√™n s·∫£n ph·∫©m!' });
    }

    const tinhTrangValue = TinhTrang === '1' || TinhTrang === 1 ? 1 : 0;
    const donGiaValue = parseFloat(DonGia) || 0;
    const soLuongValue = parseInt(SoLuong) || 0;
    const minSoLuongValue = parseInt(MinSoLuong) || 0;

    // Decide HinhAnh to set: uploaded file preferred; if not, check body HinhAnh (string) else undefined (=no change)
    const bodyHinhAnh = req.body.HinhAnh || null;
    const newHinhAnh = mainFile ? mainFile.filename : (bodyHinhAnh ? bodyHinhAnh.toString().trim() : undefined);

    connection = await pool.getConnection();
    await connection.beginTransaction();

    // Build update query dynamically
    let updateQuery = 'UPDATE sanpham SET MaTL = ?, TenSP = ?, MoTa = ?';
    const updateParams = [maTLNumber, TenSP.trim(), MoTa || null];

    if (newHinhAnh !== undefined) {
      updateQuery += ', HinhAnh = ?';
      updateParams.push(newHinhAnh);
    }

    if (isNaN(maTGNumber)) {
      updateQuery += ', MaTG = NULL';
    } else {
      updateQuery += ', MaTG = ?';
      updateParams.push(maTGNumber);
    }

    if (isNaN(namXBNumber)) {
      updateQuery += ', NamXB = NULL';
    } else {
      updateQuery += ', NamXB = ?';
      updateParams.push(namXBNumber);
    }

    if (isNaN(maNCCNumber)) {
      updateQuery += ', MaNCC = NULL';
    } else {
      updateQuery += ', MaNCC = ?';
      updateParams.push(maNCCNumber);
    }

    updateQuery += ', TinhTrang = ?, DonGia = ?, SoLuong = ?, MinSoLuong = ?, TrongLuong = ?';
    updateParams.push(tinhTrangValue, donGiaValue, soLuongValue, minSoLuongValue, isNaN(parseInt(TrongLuong)) ? null : parseInt(TrongLuong));

    updateQuery += ', KichThuoc = ?, SoTrang = ?, HinhThuc = ? WHERE MaSP = ?';
    updateParams.push(KichThuoc || null, isNaN(parseInt(SoTrang)) ? null : parseInt(SoTrang), HinhThuc || null, id);

    const [result] = await connection.query(updateQuery, updateParams);

    if (result.affectedRows === 0) {
      await connection.rollback();
      connection.release();
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi!' });
    }

    // If new extra files uploaded, insert into sanpham_anh
    if (extraFiles.length > 0) {
      const values = extraFiles.map((f, idx) => [id, f.filename, idx]);
      await connection.query('INSERT INTO sanpham_anh (MaSP, FileName, SortOrder) VALUES ?', [values]);
    }

    await connection.commit();
    connection.release();

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!', updatedBy: req.user.makh || req.user.MaTK || req.user.userId });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error.message || error);
    if (connection) {
      try { await connection.rollback(); connection.release(); } catch (e) {}
    }
    res.status(500).json({ error: 'L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m', details: error.message || 'Kh√¥ng x√°c ƒë·ªãnh' });
  }
});

// Route x√≥a m·ªôt ·∫£nh (·∫£nh ph·ª• trong sanpham_anh ho·∫∑c ·∫£nh ch√≠nh n·∫øu mu·ªën)
router.delete('/images/:imageId', authenticateToken, checkAdminPermission, async (req, res) => {
  let connection;
  try {
    const { imageId } = req.params;
    if (!imageId) return res.status(400).json({ error: 'Thi·∫øu imageId' });

    // t√¨m ·∫£nh trong b·∫£ng sanpham_anh
    const [[imgRow]] = await pool.query('SELECT Id, MaSP, FileName FROM sanpham_anh WHERE Id = ?', [imageId]);
    if (!imgRow) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ·∫£nh' });
    }

    const filename = imgRow.FileName;
    const maSP = imgRow.MaSP;

    connection = await pool.getConnection();
    await connection.beginTransaction();

    // X√≥a b·∫£n ghi kh·ªèi sanpham_anh
    await connection.query('DELETE FROM sanpham_anh WHERE Id = ?', [imageId]);

    // N·∫øu file t·ªìn t·∫°i tr√™n disk, x√≥a n√≥
    try {
      const uploadDir = 'C:/Users/PC/Desktop/CNPM/server/backend/product/';
      const filePath = path.join(uploadDir, filename);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log('üóëÔ∏è Deleted file from disk:', filePath);
      } else {
        console.warn('‚ö†Ô∏è File not found on disk:', filePath);
      }
    } catch (fsErr) {
      console.warn('Kh√¥ng th·ªÉ x√≥a file tr√™n disk:', fsErr.message || fsErr);
      // continue - we already deleted DB row
    }

    // N·∫øu filename tr√πng v·ªõi ·∫£nh ch√≠nh trong sanpham.HinhAnh, reset HinhAnh v·ªÅ NULL ho·∫∑c ch·ªçn 1 ·∫£nh kh√°c
    const [prodRows] = await connection.query('SELECT HinhAnh FROM sanpham WHERE MaSP = ? LIMIT 1', [maSP]);
    if (prodRows && prodRows.length > 0) {
      const currentMain = prodRows[0].HinhAnh;
      if (currentMain && currentMain.toString().trim() === filename) {
        // t√¨m 1 ·∫£nh c√≤n l·∫°i trong sanpham_anh ƒë·ªÉ ƒë·∫∑t l√†m ·∫£nh ch√≠nh
        const [remaining] = await connection.query('SELECT FileName FROM sanpham_anh WHERE MaSP = ? ORDER BY SortOrder ASC LIMIT 1', [maSP]);
        if (remaining && remaining.length > 0) {
          await connection.query('UPDATE sanpham SET HinhAnh = ? WHERE MaSP = ?', [remaining[0].FileName, maSP]);
        } else {
          await connection.query('UPDATE sanpham SET HinhAnh = NULL WHERE MaSP = ?', [maSP]);
        }
      }
    }

    await connection.commit();
    connection.release();

    res.status(200).json({ message: 'X√≥a ·∫£nh th√†nh c√¥ng', imageId, filename });
  } catch (error) {
    console.error('L·ªói khi x√≥a ·∫£nh:', error.message || error);
    if (connection) try { await connection.rollback(); connection.release(); } catch (e) {}
    res.status(500).json({ error: 'L·ªói khi x√≥a ·∫£nh', details: error.message });
  }
});

// Route c·∫≠p nh·∫≠t MinSoLuong (ng∆∞·ª°ng t·ªìn t·ªëi thi·ªÉu) - Y√äU C·∫¶U TOKEN V√Ä QUY·ªÄN ADMIN/STAFF
router.patch('/:id/min-stock', authenticateToken, checkAdminPermission, async (req, res) => {
  try {
    const { id } = req.params;
    const { MinSoLuong } = req.body;
    const minValue = Number.isNaN(parseInt(MinSoLuong)) ? 0 : parseInt(MinSoLuong);

    const [result] = await pool.query('UPDATE sanpham SET MinSoLuong = ? WHERE MaSP = ?', [minValue, id]);

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t ng∆∞·ª°ng t·ªìn t·ªëi thi·ªÉu th√†nh c√¥ng', MinSoLuong: minValue });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t MinSoLuong:', error);
    res.status(500).json({ error: 'L·ªói server' });
  }
});

// Route x√≥a s·∫£n ph·∫©m - Y√äU C·∫¶U TOKEN V√Ä QUY·ªÄN ADMIN/STAFF/NV004/NV007
router.delete('/:id', authenticateToken, checkAdminPermission, async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('üóëÔ∏è User deleting product:', req.user);

    // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
    const [existingProduct] = await pool.query('SELECT MaSP, TenSP FROM sanpham WHERE MaSP = ?', [id]);
    
    if (existingProduct.length === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!' });
    }

    const [result] = await pool.query('DELETE FROM sanpham WHERE MaSP = ?', [id]);

    if (result.affectedRows === 0) {
      return res.status(500).json({ error: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!' });
    }

    res.status(200).json({ 
      message: `X√≥a s·∫£n ph·∫©m "${existingProduct[0].TenSP}" th√†nh c√¥ng!`,
      deletedBy: req.user.makh || req.user.MaTK || req.user.userId,
      deletedProduct: existingProduct[0]
    });
  } catch (error) {
    console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
    
    // Ki·ªÉm tra l·ªói foreign key constraint
    if (error.code === 'ER_ROW_IS_REFERENCED_2') {
      return res.status(400).json({ 
        error: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m n√†y v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ƒë∆°n h√†ng ho·∫∑c b·∫£ng kh√°c!',
        details: 'Vui l√≤ng x√≥a c√°c tham chi·∫øu tr∆∞·ªõc khi x√≥a s·∫£n ph·∫©m.'
      });
    }
    
    res.status(500).json({ error: 'L·ªói khi x√≥a s·∫£n ph·∫©m', details: error.message });
  }
});
// Route c·∫≠p nh·∫≠t tr·∫°ng th√°i h√†ng lo·∫°t - Y√äU C·∫¶U TOKEN V√Ä QUY·ªÄN ADMIN
router.patch('/bulk-update-status', authenticateToken, checkAdminPermission, async (req, res) => {
  try {
    const { status, productIds } = req.body;
    
    console.log('üîÑ User bulk updating status:', req.user);
    console.log('üìã Update data:', { status, productIds });

    // Validate status (0 = H·∫øt h√†ng, 1 = C√≤n h√†ng)
    if (status !== 0 && status !== 1) {
      return res.status(400).json({ 
        error: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n 0 (H·∫øt h√†ng) ho·∫∑c 1 (C√≤n h√†ng)' 
      });
    }

    let query;
    let params;
    let updateCount = 0;

    if (productIds && Array.isArray(productIds) && productIds.length > 0) {
      // C·∫≠p nh·∫≠t c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
      const placeholders = productIds.map(() => '?').join(',');
      query = `UPDATE sanpham SET TinhTrang = ? WHERE MaSP IN (${placeholders})`;
      params = [status, ...productIds];
    } else {
      // C·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m
      query = 'UPDATE sanpham SET TinhTrang = ?';
      params = [status];
    }

    const [result] = await pool.query(query, params);
    updateCount = result.affectedRows;

    if (updateCount === 0) {
      return res.status(404).json({ 
        error: 'Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t!' 
      });
    }

    // L·∫•y th·ªëng k√™ sau khi c·∫≠p nh·∫≠t
    const [stats] = await pool.query(`
      SELECT 
        COUNT(*) as TongSanPham,
        SUM(CASE WHEN TinhTrang = 1 THEN 1 ELSE 0 END) as ConHang,
        SUM(CASE WHEN TinhTrang = 0 THEN 1 ELSE 0 END) as HetHang
      FROM sanpham
    `);

    res.status(200).json({ 
      message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i ${status === 1 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'} cho ${updateCount} s·∫£n ph·∫©m th√†nh c√¥ng!`,
      updatedCount: updateCount,
      updatedBy: req.user.makh || req.user.MaTK || req.user.userId,
      statistics: stats[0]
    });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h√†ng lo·∫°t:', error);
    res.status(500).json({ 
      error: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m', 
      details: error.message 
    });
  }
});

// Route l·∫•y th·ªëng k√™ tr·∫°ng th√°i s·∫£n ph·∫©m
router.get('/status-stats', async (req, res) => {
  try {
    const [stats] = await pool.query(`
      SELECT 
        COUNT(*) as TongSanPham,
        SUM(CASE WHEN TinhTrang = 1 THEN 1 ELSE 0 END) as ConHang,
        SUM(CASE WHEN TinhTrang = 0 THEN 1 ELSE 0 END) as HetHang,
        SUM(CASE WHEN TinhTrang IS NULL THEN 1 ELSE 0 END) as ChuaXacDinh
      FROM sanpham
    `);

    res.status(200).json(stats[0]);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªëng k√™:', error);
    res.status(500).json({ 
      error: 'L·ªói khi l·∫•y th·ªëng k√™ tr·∫°ng th√°i s·∫£n ph·∫©m', 
      details: error.message 
    });
  }
});




// Route l·∫•y s·∫£n ph·∫©m theo ID - S·ª¨A QUERY
// Route l·∫•y chi ti·∫øt s·∫£n ph·∫©m (k·∫øt h·ª£p th√¥ng tin nh√† cung c·∫•p, t√°c gi·∫£ v√† c√°c tr∆∞·ªùng s√°ch c√≥ trong `sanpham`)
router.get('/:id', async (req, res) => {
  try {
    const id = req.params.id;

    const query = `
      SELECT s.*, tg.TenTG AS TacGia, ncc.TenNCC AS NhaCungCap
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
      LEFT JOIN nhacungcap ncc ON s.MaNCC = ncc.MaNCC
      WHERE s.MaSP = ?
      LIMIT 1;
    `;

    const [rows] = await pool.query(query, [id]);

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    const s = rows[0];

    // Normalize bit(1) / boolean field TinhTrang which may come back as Buffer for some MySQL drivers
    let tinhTrangValue = null;
    if (s.TinhTrang === null || s.TinhTrang === undefined) tinhTrangValue = null;
    else if (typeof s.TinhTrang === 'number') tinhTrangValue = s.TinhTrang ? 1 : 0;
    else if (Buffer.isBuffer(s.TinhTrang)) tinhTrangValue = s.TinhTrang[0] ? 1 : 0;
    else tinhTrangValue = s.TinhTrang ? 1 : 0;

    const product = {
      MaSP: s.MaSP,
      MaTL: s.MaTL,
      TenSP: s.TenSP,
      MoTa: s.MoTa,
      HinhAnh: s.HinhAnh,
      DonGia: s.DonGia,
      SoLuong: s.SoLuong,
      NamXB: s.NamXB,
      TinhTrang: tinhTrangValue,
      MaTG: s.MaTG,
      TacGia: s.TacGia || null,
      MaNCC: s.MaNCC,
      NhaCungCap: s.NhaCungCap || null,
      TrongLuong: s.TrongLuong,
      KichThuoc: s.KichThuoc,
      SoTrang: s.SoTrang,
      HinhThuc: s.HinhThuc
    };

    // Attach images from sanpham_anh if any
    try {
      const [imgs] = await pool.query(
        'SELECT Id, MaSP, FileName, SortOrder, CreatedAt, UpdatedAt FROM sanpham_anh WHERE MaSP = ? ORDER BY SortOrder ASC, Id ASC',
        [id]
      );
      const baseUrl = process.env.IMG_BASE_URL || (req.protocol + '://' + req.get('host'));
      const imagesFromTable = imgs.map(r => ({
        id: r.Id,
        filename: r.FileName,
        sortOrder: r.SortOrder,
        createdAt: r.CreatedAt,
        updatedAt: r.UpdatedAt,
        url: r.FileName ? `${baseUrl}/product-images/${r.FileName}` : null,
        isPrimary: false
      }));

      const mainFilename = s.HinhAnh && s.HinhAnh.toString().trim();
      let images = [];
      if (mainFilename) {
        const matchIndex = imagesFromTable.findIndex(x => x.filename === mainFilename);
        if (matchIndex !== -1) {
          imagesFromTable[matchIndex].isPrimary = true;
          const [mainImg] = imagesFromTable.splice(matchIndex, 1);
          images.push(mainImg);
        } else {
          images.push({ id: null, filename: mainFilename, sortOrder: -1, createdAt: null, updatedAt: null, url: `${baseUrl}/product-images/${mainFilename}`, isPrimary: true });
        }
      }
      images = images.concat(imagesFromTable);
      product.images = images;
    } catch (errImgs) {
      console.warn('L·ªói l·∫•y sanpham_anh cho MaSP=', id, errImgs.message || errImgs);
      product.images = [];
    }

    res.status(200).json(product);
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m', details: error.message });
  }
});

// Route tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt r√∫t g·ªçn theo y√™u c·∫ßu (TacGia, NhaCungCap, TrongLuong, KichThuoc, SoTrang, HinhThuc, NamXB)
// ƒê·∫∑t tr∆∞·ªõc route '/:id' ƒë·ªÉ tr√°nh conflict
router.get('/:id/info', async (req, res) => {
  try {
    const id = req.params.id;

    const query = `
      SELECT s.MaSP, s.TenSP, s.NamXB AS NamXB, tg.TenTG AS TacGia, ncc.TenNCC AS NhaCungCap,
             s.TrongLuong AS TrongLuong,
             s.KichThuoc AS KichThuoc,
             s.SoTrang AS SoTrang,
             s.HinhThuc AS HinhThuc
      FROM sanpham s
      LEFT JOIN tacgia tg ON s.MaTG = tg.MaTG
      LEFT JOIN nhacungcap ncc ON s.MaNCC = ncc.MaNCC
      WHERE s.MaSP = ?
      LIMIT 1;
    `;

    const [rows] = await pool.query(query, [id]);

    if (!rows || rows.length === 0) {
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    const r = rows[0];

    const response = {
      MaSP: r.MaSP,
      TenSP: r.TenSP,
      TacGia: r.TacGia || null,
      NhaCungCap: r.NhaCungCap || null,
      TrongLuong: r.TrongLuong == null ? null : Number(r.TrongLuong),
      KichThuoc: r.KichThuoc || null,
      SoTrang: r.SoTrang == null ? null : Number(r.SoTrang),
      HinhThuc: r.HinhThuc || null,
      NamXB: r.NamXB == null ? null : Number(r.NamXB)
    };

    res.status(200).json(response);
  } catch (error) {
    console.error('L·ªói khi l·∫•y info s·∫£n ph·∫©m:', error);
    res.status(500).json({ error: 'L·ªói khi l·∫•y info s·∫£n ph·∫©m', details: error.message });
  }
});

// Fixed route: ch·ªâ tr·∫£ v·ªÅ s·∫£n ph·∫©m c·ªßa th·ªÉ lo·∫°i c√≥ MaTL = 1
router.get('/theloai/1', async (req, res) => {
  try {
    const query = `
      SELECT 
        sp.MaSP,
        sp.TenSP,
        sp.MoTa,
        sp.HinhAnh,
        sp.DonGia,
        sp.SoLuong,
        sp.NamXB,
        tl.TenTL AS TheLoai,
        tg.TenTG AS TacGia
      FROM sanpham sp
      LEFT JOIN theloai tl ON sp.MaTL = tl.MaTL
      LEFT JOIN tacgia tg ON sp.MaTG = tg.MaTG
      WHERE sp.MaTL = 1;
    `;

    const [rows] = await pool.query(query);

    return res.status(200).json({
      count: rows.length,
      data: rows
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m th·ªÉ lo·∫°i MaTL=1:', error);
    return res.status(500).json({
      error: 'L·ªói server khi l·∫•y s·∫£n ph·∫©m th·ªÉ lo·∫°i MaTL=1',
      details: error.message
    });
  }
});
export default router;