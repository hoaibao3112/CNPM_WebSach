import express from 'express';
import pool from '../config/connectDatabase.js';
import crypto from 'crypto';
import jwt from 'jsonwebtoken';
import { VNPay, ignoreLogger, ProductCode, VnpLocale, dateFormat } from 'vnpay';

const router = express.Router();

// H√†m s·∫Øp x·∫øp object ƒë·ªÉ t·∫°o hash VNPay

// H√†m s·∫Øp x·∫øp object ƒë·ªÉ t·∫°o hash VNPay
function sortObject(obj) {
  let sorted = {};
  let str = [];
  let key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      str.push(encodeURIComponent(key));
    }
  }
  str.sort();
  for (key = 0; key < str.length; key++) {
    sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
  }
  return sorted;
}
//c·∫•u h√¨nh vnpay
const vnpay = new VNPay({
  tmnCode: process.env.VNP_TMNCODE,
  secureSecret: process.env.VNP_HASHSECRET,
  vnpayHost: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html', // Thay ƒë·ªïi n√†y
  testMode: true,
  hashAlgorithm: 'SHA512',
  enableLog: true,
  loggerFn: ignoreLogger,
});

// Middleware x√°c th·ª±c token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Kh√¥ng c√≥ token' });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(403).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
  }
};
// THAY TH·∫æ TO√ÄN B·ªò ƒêO·∫†N API place-order (t·ª´ d√≤ng 52 ƒë·∫øn h·∫øt):

// API ƒë·∫∑t ƒë∆°n h√†ng
router.post('/place-order', authenticateToken, async (req, res) => {
  console.log('üöÄ Place order API called');
  console.log('üîç Request Body:', JSON.stringify(req.body, null, 2));
  
  const connection = await pool.getConnection();
  
  try {
    const { customer, items, shippingAddress, paymentMethod, notes, totalAmountDiscouted } = req.body;
    
    console.log('req.user:', req.user);
    console.log(totalAmountDiscouted);
    
    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!customer || !items || !shippingAddress || !paymentMethod) {
      return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!customer.makh || !customer.name || !customer.phone || !shippingAddress.detail ||
      !shippingAddress.province || !shippingAddress.district || !shippingAddress.ward) {
      return res.status(400).json({ error: 'Th√¥ng tin kh√°ch h√†ng ho·∫∑c ƒë·ªãa ch·ªâ kh√¥ng ƒë·∫ßy ƒë·ªß' });
    }

    // Ki·ªÉm tra kh√°ch h√†ng
    const [existingCustomer] = await connection.query('SELECT makh, email FROM khachhang WHERE makh = ?', [customer.makh]);
    if (!existingCustomer.length) {
      return res.status(400).json({ error: 'Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i' });
    }

    // Ki·ªÉm tra items
    if (!Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ error: 'Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn' });
    }

    // Validate s·∫£n ph·∫©m v√† t·ªìn kho
    const cartItems = [];
    for (const item of items) {
      if (!item.MaSP || !item.SoLuong || item.SoLuong < 1) {
        return res.status(400).json({ error: `S·∫£n ph·∫©m ${item.MaSP} kh√¥ng h·ª£p l·ªá` });
      }
      
      const [product] = await connection.query(
        'SELECT MaSP, DonGia as price, SoLuong as stock FROM sanpham WHERE MaSP = ?',
        [item.MaSP]
      );
      
      if (!product.length) {
        return res.status(400).json({ error: `S·∫£n ph·∫©m ${item.MaSP} kh√¥ng t·ªìn t·∫°i` });
      }
      
      if (product[0].stock < item.SoLuong) {
        return res.status(400).json({ error: `S·∫£n ph·∫©m ${item.MaSP} kh√¥ng ƒë·ªß t·ªìn kho (${product[0].stock} < ${item.SoLuong})` });
      }
      
      cartItems.push({
        productId: item.MaSP,
        quantity: item.SoLuong,
        price: product[0].price
      });
    }

    // T√≠nh t·ªïng ti·ªÅn
    const totalAmount = totalAmountDiscouted ? totalAmountDiscouted : cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    console.log('Validated cart items:', cartItems, 'Total:', totalAmount);

    // ‚úÖ B·∫ÆT ƒê·∫¶U TRANSACTION
    await connection.beginTransaction();

    // L∆∞u ƒë·ªãa ch·ªâ
    const [addressResult] = await connection.query(
      'INSERT INTO diachi (MaKH, TenNguoiNhan, SDT, DiaChiChiTiet, TinhThanh, QuanHuyen, PhuongXa) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [customer.makh, customer.name, customer.phone, shippingAddress.detail, shippingAddress.province, shippingAddress.district, shippingAddress.ward]
    );
    const addressId = addressResult.insertId;

    // T·∫°o ƒë∆°n h√†ng
    const [orderResult] = await connection.query(
      `INSERT INTO hoadon (makh, MaDiaChi, NgayTao, TongTien, PhuongThucThanhToan, GhiChu, tinhtrang, TrangThaiThanhToan) 
       VALUES (?, ?, NOW(), ?, ?, ?, ?, ?)`,
      [customer.makh, addressId, totalAmount, paymentMethod, notes || '', 'Ch·ªù x·ª≠ l√Ω', 'Ch∆∞a thanh to√°n']
    );
    const orderId = orderResult.insertId;

    // L∆∞u chi ti·∫øt ƒë∆°n h√†ng
    for (const item of cartItems) {
      await connection.query(
        'INSERT INTO chitiethoadon (MaHD, MaSP, SoLuong, DonGia) VALUES (?, ?, ?, ?)',
        [orderId, item.productId, item.quantity, item.price]
      );
      
      await connection.query('UPDATE sanpham SET SoLuong = SoLuong - ? WHERE MaSP = ?', [item.quantity, item.productId]);
    }

    // X√≥a gi·ªè h√†ng
    if (cartItems.length > 0) {
      const productIds = cartItems.map(i => i.productId);
      const placeholders = productIds.map(() => '?').join(',');
      await connection.query(
        `DELETE FROM giohang WHERE MaKH = ? AND MaSP IN (${placeholders})`, 
        [customer.makh, ...productIds]
      );
    }

    // ‚úÖ COMMIT TRANSACTION TR∆Ø·ªöC KHI X·ª¨ L√ù THANH TO√ÅN
    await connection.commit();
    console.log('‚úÖ Database operations completed successfully');

    // X·ª¨ L√ù THANH TO√ÅN
    if (paymentMethod === 'VNPAY') {
      try {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        
        const vnpayResponse = await vnpay.buildPaymentUrl({
          vnp_Amount: totalAmount,
          vnp_IpAddr: req.ip || req.connection.remoteAddress || '127.0.0.1',
          vnp_TxnRef: orderId.toString(),
          vnp_OrderInfo: `Thanh toan don hang ${orderId}`,
          vnp_OrderType: ProductCode.Other,
          vnp_ReturnUrl: process.env.VNP_RETURN_URL,
          vnp_Locale: VnpLocale.VN,
          vnp_CreateDate: dateFormat(new Date()),
          vnp_ExpireDate: dateFormat(tomorrow),
        });
        
        console.log('‚úÖ VNPay URL generated for order:', orderId);
        return res.status(200).json({ 
          success: true, 
          orderId, 
          paymentUrl: vnpayResponse,
          message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o, chuy·ªÉn h∆∞·ªõng thanh to√°n VNPay'
        });
      } catch (vnpayError) {
        console.error('‚ùå VNPay error:', vnpayError);
        // Rollback order n·∫øu VNPay l·ªói
        await pool.query('UPDATE hoadon SET tinhtrang = "ƒê√£ h·ªßy", GhiChu = "L·ªói VNPay" WHERE MaHD = ?', [orderId]);
        return res.status(500).json({ 
          error: 'L·ªói t·∫°o URL thanh to√°n VNPay', 
          details: vnpayError.message 
        });
      }
    } else if (paymentMethod === 'COD') {
      // ‚úÖ COD SUCCESS
      console.log('‚úÖ COD Order completed successfully with ID:', orderId);
      return res.status(200).json({ 
        success: true, 
        orderId,
        message: 'ƒê·∫∑t h√†ng COD th√†nh c√¥ng',
        paymentMethod: 'COD'
      });
    } else {
      return res.status(400).json({ error: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá' });
    }

  } catch (error) {
    // ‚ùå ROLLBACK TRANSACTION N·∫æU C√ì L·ªñI
    try {
      await connection.rollback();
      console.log('üîÑ Transaction rollback completed');
    } catch (rollbackError) {
      console.error('‚ùå Rollback error:', rollbackError);
    }
    
    console.error('‚ùå Place order error:', {
      message: error.message,
      stack: error.stack,
      sql: error.sql,
      sqlMessage: error.sqlMessage
    });
    
    res.status(500).json({ 
      error: 'L·ªói khi ƒë·∫∑t h√†ng', 
      details: error.message,
      sqlError: error.sqlMessage 
    });
  } finally {
    // ‚úÖ GI·∫¢I PH√ìNG CONNECTION
    if (connection) {
      connection.release();
    }
  }
});
// API l·∫•y danh s√°ch h√≥a ƒë∆°n (B·ªé TOKEN AUTHENTICATION - CH·ªà CHO DEV/TEST)
router.get('/hoadon', async (req, res) => {
  try {
    // Log th√¥ng tin request ƒë·ªÉ debug (kh√¥ng c·∫ßn token)
    console.log('Anonymous access to /hoadon:', {
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      timestamp: new Date().toISOString()
    });

    // C·∫¢NH B√ÅO: KH√îNG CHECK QUY·ªÄN - B·∫§T K·ª≤ AI C≈®NG ƒê·ªåC ƒê∆Ø·ª¢C DATA
    // console.warn('‚ö†Ô∏è WARNING: No authentication - Exposed to all users!');

    const [hoadon] = await pool.query(`
      SELECT 
        dh.MaHD AS id,
        dh.makh AS makh,
        dh.NgayTao AS createdAt,
        dh.TongTien AS totalAmount,
        dh.tinhtrang AS status,
        kh.tenkh AS customerName,
        kh.sdt AS customerPhone,
        dc.DiaChiChiTiet AS shippingAddress,
        dc.TinhThanh AS province,
        dc.QuanHuyen AS district,
        dh.PhuongThucThanhToan AS paymentMethod,
        dh.TrangThaiThanhToan AS paymentStatus
      FROM hoadon dh
      LEFT JOIN khachhang kh ON dh.makh = kh.makh
      LEFT JOIN diachi dc ON dh.MaDiaChi = dc.MaDiaChi
      ORDER BY dh.NgayTao DESC
    `);

    console.log(`Returned ${hoadon.length} invoices (no auth)`);

    res.json(hoadon);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch h√≥a ƒë∆°n (no auth):', {
      timestamp: new Date(),
      ip: req.ip,
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage,
        stack: error.stack
      }
    });
    res.status(500).json({
      error: 'L·ªói khi l·∫•y danh s√°ch h√≥a ƒë∆°n',
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage,
        faultyQuery: error.sql,
        stack: error.stack
      } : null
    });
  }
});

// API l·∫•y chi ti·∫øt h√≥a ƒë∆°n (B·ªé TOKEN AUTHENTICATION - CH·ªà CHO DEV/TEST)
router.get('/hoadon/:id', async (req, res) => {
  const { id } = req.params;

  try {
    // Log th√¥ng tin request ƒë·ªÉ debug (kh√¥ng c·∫ßn token)
    console.log('Anonymous access to /hoadon/:id:', {
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      invoiceId: id,
      timestamp: new Date().toISOString()
    });

    // C·∫¢NH B√ÅO: KH√îNG CHECK QUY·ªÄN - B·∫§T K·ª≤ AI C≈®NG ƒê·ªåC ƒê∆Ø·ª¢C CHI TI·∫æT H√ìA ƒê∆†N
    // console.warn('‚ö†Ô∏è WARNING: No authentication - Exposed to all users!');

    const [hoadon] = await pool.query(`
      SELECT 
        hd.MaHD,
        hd.NgayTao,
        hd.TongTien,
        hd.PhuongThucThanhToan,
        hd.GhiChu,
        hd.tinhtrang,
        hd.TrangThaiThanhToan,
        kh.tenkh AS customerName,
        kh.sdt AS customerPhone,
        kh.email AS customerEmail,
        dc.TenNguoiNhan AS recipientName,
        dc.SDT AS recipientPhone,
        dc.DiaChiChiTiet AS shippingAddress,
        dc.TinhThanh AS province,
        dc.QuanHuyen AS district,
        dc.PhuongXa AS ward
      FROM hoadon hd
      LEFT JOIN khachhang kh ON hd.makh = kh.makh
      LEFT JOIN diachi dc ON hd.MaDiaChi = dc.MaDiaChi
      WHERE hd.MaHD = ?
    `, [id]);

    if (hoadon.length === 0) {
      console.log(`Invoice ID ${id} not found`);
      return res.status(404).json({ error: `Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n ID: ${id}` });
    }

    const [chitiet] = await pool.query(`
      SELECT 
        ct.MaSP,
        ct.Soluong AS quantity,
        ct.DonGia AS price,
        sp.TenSP AS productName,
        sp.HinhAnh AS productImage,
        sp.DonGia AS productPrice
      FROM chitiethoadon ct
      JOIN sanpham sp ON ct.MaSP = sp.MaSP
      WHERE ct.MaHD = ?
    `, [id]);

    console.log(`Returned details for invoice ID ${id}, items: ${chitiet.length}`);

    res.json({
      ...hoadon[0],
      GhiChu: hoadon[0].GhiChu || '',
      items: chitiet
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt h√≥a ƒë∆°n:', {
      timestamp: new Date(),
      ip: req.ip,
      invoiceId: id,
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage,
        stack: error.stack
      }
    });
    res.status(500).json({
      error: 'L·ªói h·ªá th·ªëng',
      requestId: id,
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage,
        faultyQuery: error.sql,
        stack: error.stack
      } : null
    });
  }
});

//API c·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n (B·ªé TOKEN AUTHENTICATION - CH·ªà CHO DEV/TEST)
router.put('/hoadon/:id/trangthai', async (req, res) => {
  const { id } = req.params;
  const { trangthai, ghichu } = req.body;

  // Log th√¥ng tin request ƒë·ªÉ debug
  console.log('Anonymous access to /hoadon/:id/trangthai:', {
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    invoiceId: id,
    trangthai,
    timestamp: new Date().toISOString()
  });

  // C·∫¢NH B√ÅO: KH√îNG CHECK QUY·ªÄN - B·∫§T K·ª≤ AI C≈®NG C·∫¨P NH·∫¨T ƒê∆Ø·ª¢C
  // console.warn('‚ö†Ô∏è WARNING: No authentication - Exposed to all users!');

  if (!trangthai) {
    return res.status(400).json({ error: 'Tr·∫°ng th√°i l√† b·∫Øt bu·ªôc' });
  }

  const trangThaiHopLe = ['Ch·ªù x·ª≠ l√Ω', 'Ch·ªù x√°c nh·∫≠n', 'ƒê√£ x√°c nh·∫≠n', 'ƒêang giao h√†ng', 'ƒê√£ giao h√†ng', 'ƒê√£ h·ªßy'];
  if (!trangThaiHopLe.includes(trangthai)) {
    return res.status(400).json({ error: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const [hoadon] = await pool.query(
      `SELECT tinhtrang FROM hoadon WHERE MaHD = ?`,
      [id]
    );

    if (hoadon.length === 0) {
      console.log(`Invoice ID ${id} not found`);
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n' });
    }

    let updateQuery = `
      UPDATE hoadon 
      SET tinhtrang = ?, 
          GhiChu = IFNULL(?, GhiChu)
    `;
    const params = [trangthai, ghichu];

    if (trangthai === 'ƒê√£ giao h√†ng') {
      updateQuery += `, TrangThaiThanhToan = 'ƒê√£ nh·∫≠n ti·ªÅn'`;
    }

    updateQuery += ` WHERE MaHD = ?`;
    params.push(id);

    await pool.query(updateQuery, params);

    console.log(`Updated status for invoice ID ${id} to ${trangthai}`);
    res.json({ success: true, message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', {
      timestamp: new Date(),
      ip: req.ip,
      invoiceId: id,
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage,
        stack: error.stack
      }
    });
    res.status(500).json({
      error: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i',
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage,
        faultyQuery: error.sql
      } : null
    });
  }
});

// API h·ªßy h√≥a ƒë∆°n (B·ªé TOKEN AUTHENTICATION - CH·ªà CHO DEV/TEST)
router.put('/hoadon/:id/huy', async (req, res) => {
  const { id } = req.params;
  const { lyDo } = req.body;

  // Log th√¥ng tin request ƒë·ªÉ debug
  console.log('Anonymous access to /hoadon/:id/huy:', {
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    invoiceId: id,
    lyDo,
    timestamp: new Date().toISOString()
  });

  // C·∫¢NH B√ÅO: KH√îNG CHECK QUY·ªÄN - B·∫§T K·ª≤ AI C≈®NG H·ª¶Y ƒê∆Ø·ª¢C
  // console.warn('‚ö†Ô∏è WARNING: No authentication - Exposed to all users!');

  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    const [hoadon] = await connection.query(
      `SELECT tinhtrang FROM hoadon WHERE MaHD = ?`,
      [id]
    );

    if (hoadon.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n');
    }

    if (hoadon[0].tinhtrang === 'ƒê√£ h·ªßy') {
      throw new Error('H√≥a ƒë∆°n ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥');
    }

    if (!['Ch·ªù x·ª≠ l√Ω', 'ƒê√£ x√°c nh·∫≠n'].includes(hoadon[0].tinhtrang)) {
      throw new Error('Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "Ch·ªù x·ª≠ l√Ω" ho·∫∑c "ƒê√£ x√°c nh·∫≠n"');
    }

    await connection.query(
      `UPDATE hoadon 
       SET tinhtrang = 'ƒê√£ h·ªßy', 
           GhiChu = CONCAT(IFNULL(GhiChu, ''), ?) 
       WHERE MaHD = ?`,
      [`\nL√Ω do h·ªßy: ${lyDo || 'Kh√¥ng c√≥ l√Ω do'}`, id]
    );

    const [chitiet] = await connection.query(
      `SELECT MaSP, Soluong FROM chitiethoadon WHERE MaHD = ?`,
      [id]
    );

    for (const item of chitiet) {
      await connection.query(
        `UPDATE sanpham SET SoLuong = SoLuong + ? WHERE MaSP = ?`,
        [item.Soluong, item.MaSP]
      );
    }

    await connection.commit();
    console.log(`Cancelled invoice ID ${id}, reason: ${lyDo || 'N/A'}`);
    res.json({ success: true, message: 'H·ªßy h√≥a ƒë∆°n th√†nh c√¥ng' });
  } catch (error) {
    await connection.rollback();
    console.error('L·ªói khi h·ªßy h√≥a ƒë∆°n:', {
      timestamp: new Date(),
      ip: req.ip,
      invoiceId: id,
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage,
        stack: error.stack
      }
    });
    res.status(500).json({
      error: 'L·ªói khi h·ªßy h√≥a ƒë∆°n',
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage || error.message,
        faultyQuery: error.sql || 'N/A'
      } : null
    });
  } finally {
    connection.release();
  }
});
// API l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng
router.get('/customer-orders/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;

  try {
    const [orders] = await pool.query(`
      SELECT 
        hd.MaHD AS id,
        hd.NgayTao AS createdAt,
        hd.TongTien AS totalAmount,
        hd.tinhtrang AS status,
        hd.PhuongThucThanhToan AS paymentMethod,
        hd.TrangThaiThanhToan AS paymentStatus,
        dc.TenNguoiNhan AS recipientName,
        dc.SDT AS recipientPhone,
        dc.DiaChiChiTiet AS shippingAddress,
        dc.TinhThanh AS province,
        dc.QuanHuyen AS district,
        dc.PhuongXa AS ward
      FROM hoadon hd
      LEFT JOIN diachi dc ON hd.MaDiaChi = dc.MaDiaChi
      WHERE hd.makh = ?
      ORDER BY hd.NgayTao DESC
    `, [customerId]);

    res.json(orders);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:', {
      timestamp: new Date(),
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage
      }
    });
    res.status(500).json({
      error: 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng',
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage,
        faultyQuery: error.sql
      } : null
    });
  }
});

// API l·∫•y chi ti·∫øt ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng
router.get('/customer-orders/detail/:orderId', authenticateToken, async (req, res) => {
  const { orderId } = req.params;

  try {
    const [order] = await pool.query(`
      SELECT 
        hd.MaHD AS id,
        hd.NgayTao AS createdAt,
        hd.TongTien AS totalAmount,
        hd.tinhtrang AS status,
        hd.PhuongThucThanhToan AS paymentMethod,
        hd.TrangThaiThanhToan AS paymentStatus,
        hd.GhiChu AS notes,
        dc.TenNguoiNhan AS recipientName,
        dc.SDT AS recipientPhone,
        dc.DiaChiChiTiet AS shippingAddress,
        dc.TinhThanh AS province,
        dc.QuanHuyen AS district,
        dc.PhuongXa AS ward
      FROM hoadon hd
      LEFT JOIN diachi dc ON hd.MaDiaChi = dc.MaDiaChi
      WHERE hd.MaHD = ?
    `, [orderId]);

    if (order.length === 0) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    const [items] = await pool.query(`
      SELECT 
        ct.MaSP AS productId,
        sp.TenSP AS productName,
        sp.HinhAnh AS productImage,
        ct.DonGia AS price,
        ct.Soluong AS quantity
      FROM chitiethoadon ct
      JOIN sanpham sp ON ct.MaSP = sp.MaSP
      WHERE ct.MaHD = ?
    `, [orderId]);

    res.json({
      ...order[0],
      items
    });
  } catch (error) {
    console.error('L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', {
      timestamp: new Date(),
      errorDetails: {
        message: error.message,
        sqlQuery: error.sql,
        sqlMessage: error.sqlMessage
      }
    });
    res.status(500).json({
      error: 'L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng',
      details: process.env.NODE_ENV === 'development' ? {
        type: 'SQL_ERROR',
        message: error.sqlMessage,
        faultyQuery: error.sql
      } : null
    });
  }
});

// routes: orderRoutes.js
router.put('/customer-orders/cancel/:orderId', authenticateToken, async (req, res) => {
  const { orderId } = req.params;
  const body = req.body || {};

  // Kh√¥ng tin client-sent customerId: l·∫•y t·ª´ token
  const customerId = req.user && req.user.makh;
  if (!customerId) return res.status(401).json({ success: false, error: 'Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng' });

  // L√Ω do h·ªßy + th√¥ng tin ng√¢n h√†ng
  const refundReason = body.reason || null;
  let { refundAmount, refundType, bankAccount, bankName, accountHolder, bankBranch } = body;

  // Chu·∫©n h√≥a bankAccount: ch·ªâ l·∫•y digits
  if (typeof bankAccount === 'string') bankAccount = bankAccount.replace(/\D/g, '') || null;

  // Helper: ki·ªÉm tra thi·∫øu bank fields
  const getMissingBankFields = () => {
    const missing = [];
    if (!bankAccount) missing.push('bankAccount');
    if (!bankName) missing.push('bankName');
    if (!accountHolder) missing.push('accountHolder');
    return missing;
  };

  const nowNote = () => `[${new Date().toLocaleString()}]`;

  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    // 1) Kh√≥a ƒë∆°n h√†ng v√† x√°c ƒë·ªãnh ph√¢n nh√°nh
    const [orderRows] = await conn.query(
      `
      SELECT hd.*,
             CASE 
  WHEN hd.TrangThaiThanhToan IN ('ƒê√£ thanh to√°n','ƒêang ho√†n ti·ªÅn') THEN 'NEED_REFUND'
  ELSE 'NORMAL_CANCEL'
END AS cancel_type
      FROM hoadon hd
      WHERE hd.MaHD = ? AND hd.makh = ?
      FOR UPDATE
      `,
      [orderId, customerId]
    );

    if (!orderRows.length) {
      await conn.rollback();
      return res.status(404).json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c kh√¥ng c√≥ quy·ªÅn' });
    }

    const order = orderRows[0];

    // Tr·∫°ng th√°i cho ph√©p h·ªßy (t√πy nghi·ªáp v·ª• c·ªßa b·∫°n)
    if (!['Ch·ªù x·ª≠ l√Ω', 'ƒê√£ x√°c nh·∫≠n'].includes(order.tinhtrang)) {
      await conn.rollback();
      return res.status(400).json({ success: false, error: 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i hi·ªán t·∫°i' });
    }

    // 2) (Optional) T√¨m tra_hang ƒë·ªÉ g·∫Øn return_id cho refund_request
    const [trows] = await conn.query(
      `SELECT id FROM tra_hang WHERE ma_don_hang = ? ORDER BY id DESC LIMIT 1`,
      [String(orderId)]
    );
    const matchedReturnId = trows?.[0]?.id ?? null;

    // 3) N·∫øu ƒë√£ c√≥ refund ƒëang PENDING/PROCESSING ‚Üí ∆ØU TI√äN c·∫≠p nh·∫≠t bank info r·ªìi k·∫øt th√∫c
    const [existing] = await conn.query(
      `
      SELECT * FROM refund_requests
      WHERE orderId = ? 
        AND (customerId = ? OR ? IS NOT NULL AND return_id = ?)
        AND status IN ('PENDING','PROCESSING')
      ORDER BY id DESC
      LIMIT 1
      `,
      [String(orderId), customerId, matchedReturnId, matchedReturnId]
    );

    if (existing.length) {
      // Y√™u c·∫ßu bank fields khi kh√°ch c·∫≠p nh·∫≠t
      const missing = getMissingBankFields();
      if (missing.length) {
        await conn.rollback();
        return res.status(400).json({ success: false, error: 'Thi·∫øu th√¥ng tin t√†i kho·∫£n nh·∫≠n ho√†n ti·ªÅn', missingFields: missing });
      }

      const finalRefundAmount =
        body.refundAmount != null
          ? Number(body.refundAmount)
          : Number(order.TongTien || 0);

      await conn.query(
        `
        UPDATE refund_requests
           SET refundAmount = ?,
               bankAccount = ?, bankName = ?, accountHolder = ?, bankBranch = ?,
               refundReason = COALESCE(?, refundReason),
               updatedAt = NOW()
         WHERE id = ?
        `,
        [
          finalRefundAmount,
          bankAccount, bankName, accountHolder, bankBranch || null,
          refundReason,
          existing[0].id
        ]
      );

      // C·∫≠p nh·∫≠t h√≥a ƒë∆°n: ƒë√°nh d·∫•u ƒë√£ h·ªßy v√† ƒëang ho√†n ti·ªÅn
      await conn.query(
        `
        UPDATE hoadon
           SET tinhtrang = 'ƒê√£ h·ªßy - ch·ªù ho√†n ti·ªÅn',
               TrangThaiThanhToan = 'ƒêang ho√†n ti·ªÅn',
               GhiChu = CONCAT(IFNULL(GhiChu,''), ?)
         WHERE MaHD = ?
        `,
        [`\n${nowNote()} Kh√°ch c·∫≠p nh·∫≠t th√¥ng tin ho√†n ti·ªÅn (req: ${existing[0].refundRequestId || existing[0].id})`, orderId]
      );

      // Ho√†n kho
      await conn.query(
        `
        UPDATE sanpham sp
        JOIN chitiethoadon ct ON sp.MaSP = ct.MaSP
           SET sp.SoLuong = sp.SoLuong + ct.Soluong
         WHERE ct.MaHD = ?
        `,
        [orderId]
      );

      await conn.commit();
      return res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t y√™u c·∫ßu ho√†n ti·ªÅn ƒëang x·ª≠ l√Ω',
        data: { refundId: existing[0].id, status: existing[0].status }
      });
    }

    // 4) Ch∆∞a c√≥ refund_request n√†o ‚Üí Ph√¢n nh√°nh theo cancel_type
    if (order.cancel_type === 'NEED_REFUND') {
      // Validate bank fields
      const missing = getMissingBankFields();
      if (missing.length) {
        await conn.rollback();
        return res.status(400).json({ success: false, error: 'Thi·∫øu th√¥ng tin t√†i kho·∫£n nh·∫≠n ho√†n ti·ªÅn', missingFields: missing });
      }

      const finalRefundAmount =
        body.refundAmount != null
          ? Number(body.refundAmount)
          : Number(order.TongTien || 0);

      const refundRequestId = `REF_${orderId}_${Date.now()}`;

      await conn.query(
        `
        INSERT INTO refund_requests
          (orderId, customerId, refundRequestId, refundAmount, refundType, refundReason,
           bankAccount, bankName, accountHolder, bankBranch,
           status, createdAt, return_id)
        VALUES
          (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'PENDING', NOW(), ?)
        `,
        [
          String(orderId), customerId, refundRequestId,
          finalRefundAmount,
          refundType || 'full',
          refundReason || null,
          bankAccount, bankName, accountHolder, bankBranch || null,
          matchedReturnId
        ]
      );

      // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
      await conn.query(
        `
        UPDATE hoadon
           SET tinhtrang = 'ƒê√£ h·ªßy - ch·ªù ho√†n ti·ªÅn',
               TrangThaiThanhToan = 'ƒêang ho√†n ti·ªÅn',
               GhiChu = CONCAT(IFNULL(GhiChu,''), ?)
         WHERE MaHD = ?
        `,
        [`\n${nowNote()} Y√™u c·∫ßu ho√†n ti·ªÅn: ${refundRequestId}`, orderId]
      );

      // Ho√†n kho
      await conn.query(
        `
        UPDATE sanpham sp
        JOIN chitiethoadon ct ON sp.MaSP = ct.MaSP
           SET sp.SoLuong = sp.SoLuong + ct.Soluong
         WHERE ct.MaHD = ?
        `,
        [orderId]
      );

      await conn.commit();
      return res.json({
        success: true,
        message: 'ƒê√£ t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
        data: {
          orderId,
          refundRequestId,
          refundAmount: finalRefundAmount,
          status: 'PENDING',
          bankAccount: bankAccount ? `****${String(bankAccount).slice(-4)}` : null,
          bankName,
          accountHolder,
          return_id: matchedReturnId
        }
      });
    }

    // 5) Nh√°nh h·ªßy COD (kh√¥ng ho√†n ti·ªÅn qua VNPay)
    await conn.query(
      `
      UPDATE hoadon
         SET tinhtrang = 'ƒê√£ h·ªßy',
             GhiChu = CONCAT(IFNULL(GhiChu,''), ?)
       WHERE MaHD = ?
      `,
      [`\n${nowNote()} L√Ω do h·ªßy: ${refundReason || 'Kh√°ch h·ªßy'}`, orderId]
    );

    await conn.query(
      `
      UPDATE sanpham sp
      JOIN chitiethoadon ct ON sp.MaSP = ct.MaSP
         SET sp.SoLuong = sp.SoLuong + ct.Soluong
       WHERE ct.MaHD = ?
      `,
      [orderId]
    );

    await conn.commit();
    return res.json({ success: true, message: 'ƒê√£ h·ªßy ƒë∆°n h√†ng (COD) th√†nh c√¥ng', data: { orderId } });

  } catch (err) {
    try { await conn.rollback(); } catch (e) {}
    console.error('Cancel-with-refund error:', err);
    return res.status(500).json({ success: false, error: 'L·ªói khi x·ª≠ l√Ω h·ªßy ƒë∆°n', details: err.message });
  } finally {
    conn.release();
  }
});


// API x·ª≠ l√Ω return URL t·ª´ VNPay - CH·ªà S·ª¨A TR·∫†NG TH√ÅI
router.get('/vnpay_return', async (req, res) => {
  try {
    console.log('VNPay Return params:', req.query);
    
    const verify = vnpay.verifyReturnUrl(req.query);
    const orderId = req.query.vnp_TxnRef;
    const rspCode = req.query.vnp_ResponseCode;
    const amount = parseInt(req.query.vnp_Amount) / 100;
    
    if (!verify.isSuccess) {
      console.warn("‚ùå Sai ch·ªØ k√Ω VNPay:", verify.message);
      return res.redirect(
        `${process.env.CLIENT_CUSTOMER_URL}/GiaoDien/order-confirmation.html?orderId=${orderId}&status=invalid_signature`
      );
    }

    if (rspCode === "00") {
      // ‚úÖ S·ª¨A: Thanh to√°n th√†nh c√¥ng - CH·ªà C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI THANH TO√ÅN, GI·ªÆ "Ch·ªù x·ª≠ l√Ω"
      await pool.query(
        `UPDATE hoadon 
         SET TrangThaiThanhToan = 'ƒê√£ thanh to√°n'
         WHERE MaHD = ?`,
        [orderId]
      );
      
      console.log(`‚úÖ Thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng ${orderId}, s·ªë ti·ªÅn: ${amount} - TR·∫†NG TH√ÅI: Ch·ªù x·ª≠ l√Ω`);
      return res.redirect(
        `${process.env.CLIENT_CUSTOMER_URL}/GiaoDien/order-confirmation.html?orderId=${orderId}&amount=${amount}&status=success`
      );
    } else {
      // Thanh to√°n th·∫•t b·∫°i - C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI THANH TO√ÅN V√Ä ƒê∆†N H√ÄNG
      await pool.query(
        `UPDATE hoadon 
         SET TrangThaiThanhToan = 'Th·∫•t b·∫°i',
             tinhtrang = 'ƒê√£ h·ªßy'
         WHERE MaHD = ?`,
        [orderId]
      );
      
      // Ho√†n l·∫°i t·ªìn kho khi thanh to√°n th·∫•t b·∫°i
      const [chitiet] = await pool.query(
        `SELECT MaSP, Soluong FROM chitiethoadon WHERE MaHD = ?`,
        [orderId]
      );

      for (const item of chitiet) {
        await pool.query(
          `UPDATE sanpham SET SoLuong = SoLuong + ? WHERE MaSP = ?`,
          [item.Soluong, item.MaSP]
        );
      }
      
      console.log(`‚ùå Thanh to√°n th·∫•t b·∫°i cho ƒë∆°n h√†ng ${orderId}, m√£ l·ªói: ${rspCode} - ƒê√É H·ª¶Y ƒê∆†N H√ÄNG`);
      return res.redirect(
        `${process.env.CLIENT_CUSTOMER_URL}/GiaoDien/order-confirmation.html?orderId=${orderId}&amount=${amount}&status=failed&code=${rspCode}`
      );
    }

  } catch (error) {
    console.error("üî• L·ªói x·ª≠ l√Ω /vnpay_return:", error);
    return res.redirect(
      `${process.env.CLIENT_CUSTOMER_URL}/GiaoDien/order-confirmation.html?status=error`
    );
  }
});




// üî• API ho√†n ti·ªÅn th·ªß c√¥ng - C·∫≠p nh·∫≠t cho ƒë√∫ng database
router.post('/vnpay_refund', authenticateToken, async (req, res) => {
  try {
    const { orderId, refundAmount, refundReason } = req.body;
    
    if (!orderId || !refundAmount || !refundReason) {
      return res.status(400).json({ 
        success: false,
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' 
      });
    }

    // ‚úÖ Ki·ªÉm tra ƒë∆°n h√†ng (ƒë√∫ng t√™n c·ªôt)
    const [order] = await pool.query(`
      SELECT hd.*, kh.tenkh 
      FROM hoadon hd 
      LEFT JOIN khachhang kh ON hd.makh = kh.makh 
      WHERE hd.MaHD = ?
    `, [orderId]);

    if (order.length === 0) {
      return res.status(404).json({ 
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' 
      });
    }

    const orderData = order[0];

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ho√†n ti·ªÅn
    if (orderData.PhuongThucThanhToan !== 'VNPAY') {
      return res.status(400).json({ 
        success: false,
        error: 'ƒê∆°n h√†ng kh√¥ng thanh to√°n qua VNPay' 
      });
    }

    if (orderData.TrangThaiThanhToan !== 'ƒê√£ thanh to√°n') {
      return res.status(400).json({ 
        success: false,
        error: 'ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n' 
      });
    }

    if (refundAmount > orderData.TongTien) {
      return res.status(400).json({ 
        success: false,
        error: `S·ªë ti·ªÅn ho√†n v∆∞·ª£t qu√° t·ªïng ti·ªÅn ƒë∆°n h√†ng` 
      });
    }

    // ‚úÖ T·∫°o y√™u c·∫ßu ho√†n ti·ªÅn (ƒë√∫ng t√™n c·ªôt)
    const refundRequestId = `REFUND_${orderId}_${Date.now()}`;
    const isFullRefund = refundAmount >= orderData.TongTien;

    const [insertResult] = await pool.query(`
      INSERT INTO nhatky_hoantienvnpay 
      (ma_hoadon, ma_khachhang, ma_yc_hoantra, sotien_hoantra, lydo_hoantra, trangthai, ngay_tao) 
      VALUES (?, ?, ?, ?, ?, 'DANG_XL', NOW())
    `, [
      orderId, 
      orderData.makh, 
      refundRequestId, 
      refundAmount, 
      refundReason
    ]);

    // Simulate VNPay success
    const refundSuccess = true;

    if (refundSuccess) {
      await pool.query(`
        UPDATE nhatky_hoantienvnpay 
        SET trangthai = 'THANH_CONG',
            ngay_capnhat = NOW()
        WHERE id = ?
      `, [insertResult.insertId]);

      await pool.query(`
        UPDATE hoadon 
        SET TrangThaiThanhToan = ?,
            GhiChu = CONCAT(IFNULL(GhiChu, ''), ?)
        WHERE MaHD = ?
      `, [
        isFullRefund ? 'ƒê√£ ho√†n ti·ªÅn' : 'Ho√†n m·ªôt ph·∫ßn',
        `\n[${new Date().toLocaleString()}] Ho√†n ti·ªÅn: ${refundAmount.toLocaleString()}ƒë`,
        orderId
      ]);

      res.json({
        success: true,
        message: 'Ho√†n ti·ªÅn th√†nh c√¥ng',
        data: {
          refundRequestId,
          refundAmount,
          isFullRefund,
          orderId: orderId,
          status: 'COMPLETED'
        }
      });
    } else {
      await pool.query(`
        UPDATE nhatky_hoantienvnpay 
        SET trangthai = 'THAT_BAI',
            ngay_capnhat = NOW()
        WHERE id = ?
      `, [insertResult.insertId]);

      res.status(400).json({
        success: false,
        error: 'Ho√†n ti·ªÅn th·∫•t b·∫°i t·ª´ VNPay'
      });
    }

  } catch (error) {
    console.error('VNPay Refund Error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng khi ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});

// ‚úÖ THAY B·∫∞NG API M·ªöI n√†y:
router.get('/customer-refunds/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;

  try {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (req.user.makh != customerId && req.user.userType !== 'admin') {
      return res.status(403).json({ 
        success: false,
        error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' 
      });
    }

    const [refunds] = await pool.query(`
      SELECT 
        rr.id,
        rr.orderId,
        rr.refundRequestId,
        rr.refundAmount,
        rr.refundReason,
        rr.status,
        rr.createdAt,
        rr.processedAt,
        rr.bankAccount,
        rr.bankName,
        rr.accountHolder,
        hd.NgayTao AS orderDate,
        hd.TongTien AS orderAmount,
        kh.tenkh AS customerName,
        CASE rr.status
          WHEN 'PENDING' THEN 'Ch·ªù x·ª≠ l√Ω'
          WHEN 'PROCESSING' THEN 'ƒêang x·ª≠ l√Ω'
          WHEN 'COMPLETED' THEN 'ƒê√£ ho√†n ti·ªÅn'
          WHEN 'REJECTED' THEN 'T·ª´ ch·ªëi'
          WHEN 'CANCELLED' THEN 'ƒê√£ h·ªßy'
          ELSE 'Kh√¥ng x√°c ƒë·ªãnh'
        END AS statusDisplay,
        -- ·∫®n th√¥ng tin nh·∫°y c·∫£m
        CONCAT('****', RIGHT(rr.bankAccount, 4)) AS maskedBankAccount
      FROM refund_requests rr
      LEFT JOIN hoadon hd ON rr.orderId = hd.MaHD
      LEFT JOIN khachhang kh ON rr.customerId = kh.makh
      WHERE rr.customerId = ?
      ORDER BY rr.createdAt DESC
    `, [customerId]);

    const summary = {
      total: refunds.length,
      pending: refunds.filter(r => r.status === 'PENDING').length,
      processing: refunds.filter(r => r.status === 'PROCESSING').length,
      completed: refunds.filter(r => r.status === 'COMPLETED').length,
      rejected: refunds.filter(r => r.status === 'REJECTED').length,
      totalAmount: refunds.reduce((sum, r) => sum + parseFloat(r.refundAmount || 0), 0)
    };

    res.json({
      success: true,
      data: refunds,
      summary
    });

  } catch (error) {
    console.error('Get customer refunds error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói khi l·∫•y danh s√°ch ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});


// ‚úÖ TH√äM: API xem l·ªãch s·ª≠ ho√†n ti·ªÅn c·ªßa kh√°ch h√†ng
router.get('/customer-refunds/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;

  try {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (req.user.makh != customerId && req.user.userType !== 'admin') {
      return res.status(403).json({ error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }

    const [refunds] = await pool.query(`
      SELECT 
        nt.id,
        nt.ma_hoadon AS orderId,
        nt.ma_yc_hoantra AS refundRequestId,
        nt.sotien_hoantra AS refundAmount,
        nt.lydo_hoantra AS refundReason,
        nt.trangthai AS status,
        nt.ngay_tao AS createdAt,
        nt.ngay_vnpay_xuly AS processedAt,
        nt.phi_hoantra AS refundFee,
        hd.NgayTao AS orderDate,
        hd.TongTien AS orderAmount,
        hd.SoTienHoanTra AS totalRefunded,
        kh.tenkh AS customerName,
        CASE nt.trangthai
          WHEN 'THANH_CONG' THEN 'Th√†nh c√¥ng'
          WHEN 'THAT_BAI' THEN 'Th·∫•t b·∫°i'
          WHEN 'DANG_XL' THEN 'ƒêang x·ª≠ l√Ω'
          ELSE 'Kh√¥ng x√°c ƒë·ªãnh'
        END AS statusDisplay
      FROM nhatky_hoantienvnpay nt
      LEFT JOIN hoadon hd ON nt.ma_hoadon = hd.MaHD
      LEFT JOIN khachhang kh ON nt.ma_khachhang = kh.makh
      WHERE nt.ma_khachhang = ?
      ORDER BY nt.ngay_tao DESC
    `, [customerId]);

    const summary = {
      totalRefunds: refunds.length,
      totalAmount: refunds.reduce((sum, r) => sum + parseFloat(r.refundAmount || 0), 0),
      successCount: refunds.filter(r => r.status === 'THANH_CONG').length,
      pendingCount: refunds.filter(r => r.status === 'DANG_XL').length,
      failedCount: refunds.filter(r => r.status === 'THAT_BAI').length
    };

    res.json({
      success: true,
      data: refunds,
      summary
    });

  } catch (error) {
    console.error('L·ªói khi l·∫•y l·ªãch s·ª≠ ho√†n ti·ªÅn:', error);
    res.status(500).json({
      error: 'L·ªói khi l·∫•y l·ªãch s·ª≠ ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});

// ‚úÖ T∆∞∆°ng t·ª±, c·∫≠p nh·∫≠t API admin-refunds n·∫øu c√≥:
router.get('/admin-refunds', authenticateToken, async (req, res) => {
  try {
    const { status, page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = '';
    let params = [];

    if (status && status !== 'all') {
      whereClause = 'WHERE rr.status = ?';
      params.push(status);
    }

    const [refunds] = await pool.query(`
      SELECT 
        rr.*,
        hd.NgayTao AS orderDate,
        hd.TongTien AS orderAmount,
        hd.tinhtrang AS orderStatus,
        hd.PhuongThucThanhToan AS paymentMethod,
        kh.tenkh AS customerName,
        kh.sdt AS customerPhone,
        kh.email AS customerEmail,
        CASE rr.status
          WHEN 'PENDING' THEN 'Ch·ªù x·ª≠ l√Ω'
          WHEN 'PROCESSING' THEN 'ƒêang x·ª≠ l√Ω'
          WHEN 'COMPLETED' THEN 'ƒê√£ ho√†n ti·ªÅn'
          WHEN 'REJECTED' THEN 'T·ª´ ch·ªëi'
          WHEN 'CANCELLED' THEN 'ƒê√£ h·ªßy'
          ELSE 'Kh√¥ng x√°c ƒë·ªãnh'
        END AS statusDisplay
      FROM refund_requests rr
      LEFT JOIN hoadon hd ON rr.orderId = hd.MaHD
      LEFT JOIN khachhang kh ON rr.customerId = kh.makh
      ${whereClause}
      ORDER BY rr.createdAt DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    const [countResult] = await pool.query(`
      SELECT COUNT(*) as total 
      FROM refund_requests rr 
      ${whereClause}
    `, params);

    const summary = {
      total: countResult[0].total,
      currentPage: parseInt(page),
      totalPages: Math.ceil(countResult[0].total / limit),
      pending: refunds.filter(r => r.status === 'PENDING').length,
      processing: refunds.filter(r => r.status === 'PROCESSING').length,
      completed: refunds.filter(r => r.status === 'COMPLETED').length,
      rejected: refunds.filter(r => r.status === 'REJECTED').length
    };

    res.json({
      success: true,
      data: refunds,
      summary
    });

  } catch (error) {
    console.error('Get admin refunds error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói khi l·∫•y danh s√°ch ho√†n ti·ªÅn cho admin'
    });
  }
});

// API c·∫≠p nh·∫≠t h·ªßy ƒë∆°n h√†ng v·ªõi ho√†n ti·ªÅn - C·∫¨P NH·∫¨T
router.put('/customer-orders/cancel-with-refund/:orderId', authenticateToken, async (req, res) => {
  const { orderId } = req.params;
  const { customerId, reason, refundAmount } = req.body;

  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    // Ki·ªÉm tra ƒë∆°n h√†ng
    const [order] = await connection.query(
      `SELECT * FROM hoadon WHERE MaHD = ? AND makh = ?`,
      [orderId, customerId]
    );

    if (order.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng');
    }

    const orderData = order[0];

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (!['Ch·ªù x·ª≠ l√Ω', 'ƒê√£ x√°c nh·∫≠n'].includes(orderData.tinhtrang)) {
      throw new Error('Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "Ch·ªù x·ª≠ l√Ω" ho·∫∑c "ƒê√£ x√°c nh·∫≠n"');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    await connection.query(
      `UPDATE hoadon 
       SET tinhtrang = 'ƒê√£ h·ªßy', 
           GhiChu = CONCAT(IFNULL(GhiChu, ''), ?) 
       WHERE MaHD = ?`,
      [`\nL√Ω do h·ªßy: ${reason || 'Kh√¥ng c√≥ l√Ω do'}`, orderId]
    );

    // Ho√†n l·∫°i t·ªìn kho
    const [chitiet] = await connection.query(
      `SELECT MaSP, Soluong FROM chitiethoadon WHERE MaHD = ?`,
      [orderId]
    );

    for (const item of chitiet) {
      await connection.query(
        `UPDATE sanpham SET SoLuong = SoLuong + ? WHERE MaSP = ?`,
        [item.Soluong, item.MaSP]
      );
    }

    await connection.commit();

    // N·∫øu ƒë√£ thanh to√°n VNPay v√† y√™u c·∫ßu ho√†n ti·ªÅn
    if (orderData.PhuongThucThanhToan === 'VNPAY' && 
        orderData.TrangThaiThanhToan === 'ƒê√£ thanh to√°n' && 
        refundAmount > 0) {
      
      // ‚úÖ S·ª¨A: G·ªçi API ho√†n ti·ªÅn v·ªõi URL ƒë√∫ng
      try {
        const refundResponse = await fetch(`http://localhost:${process.env.PORT || 5000}/api/orders/vnpay_refund`, {
          method: 'POST',
          headers: {
            'Authorization': req.headers.authorization,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            orderId,
            refundAmount: refundAmount || orderData.TongTien,
            refundReason: `Kh√°ch h√†ng h·ªßy ƒë∆°n: ${reason || 'Kh√¥ng c√≥ l√Ω do'}`
          })
        });

        const refundResult = await refundResponse.json();

        res.json({
          success: true,
          message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng',
          refund: refundResult.success ? {
            status: 'PROCESSING',
            amount: refundAmount || orderData.TongTien,
            message: 'Ho√†n ti·ªÅn ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng ki·ªÉm tra t√†i kho·∫£n sau 1-3 ng√†y l√†m vi·ªác'
          } : {
            status: 'FAILED',
            message: 'H·ªßy ƒë∆°n th√†nh c√¥ng nh∆∞ng ho√†n ti·ªÅn th·∫•t b·∫°i, vui l√≤ng li√™n h·ªá CSKH',
            error: refundResult.error
          }
        });
      } catch (refundError) {
        console.error('L·ªói khi g·ªçi API ho√†n ti·ªÅn:', refundError);
        res.json({
          success: true,
          message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng',
          refund: {
            status: 'FAILED',
            message: 'H·ªßy ƒë∆°n th√†nh c√¥ng nh∆∞ng ho√†n ti·ªÅn th·∫•t b·∫°i do l·ªói h·ªá th·ªëng, vui l√≤ng li√™n h·ªá CSKH'
          }
        });
      }
    } else {
      res.json({
        success: true,
        message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng',
        refund: null
      });
    }

  } catch (error) {
    await connection.rollback();
    console.error('L·ªói khi h·ªßy ƒë∆°n h√†ng v·ªõi ho√†n ti·ªÅn:', error);
    res.status(500).json({
      error: 'L·ªói khi h·ªßy ƒë∆°n h√†ng',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  } finally {
    connection.release();
  }
});

///////--------ch·ª©c nƒÉng ho√†n ti·ªÅn cho kh√°ch h√†ng--------------------///////////

// ‚úÖ API t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn m·ªõi
router.post('/refund-requests', authenticateToken, async (req, res) => {
  try {
    const { 
      orderId, 
      refundAmount, 
      refundType, 
      refundReason,
      bankAccount,
      bankName,
      accountHolder,
      bankBranch 
    } = req.body;
    
    const customerId = req.user.makh;
    
    // Validate ƒë·∫ßu v√†o
    if (!orderId || !refundAmount || !bankAccount || !bankName || !accountHolder) {
      return res.status(400).json({ 
        success: false,
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (orderId, refundAmount, bankAccount, bankName, accountHolder)' 
      });
    }

    // Validate s·ªë t√†i kho·∫£n
    if (!/^[0-9]{8,20}$/.test(bankAccount)) {
      return res.status(400).json({ 
        success: false,
        error: 'S·ªë t√†i kho·∫£n kh√¥ng h·ª£p l·ªá (8-20 ch·ªØ s·ªë)' 
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng
    // NOTE: allow refunds for any payment method as long as the order's payment status indicates it can be refunded
    const [order] = await pool.query(`
      SELECT * FROM hoadon 
      WHERE MaHD = ? 
        AND makh = ? 
        AND TrangThaiThanhToan IN ('ƒê√£ thanh to√°n','ƒêang ho√†n ti·ªÅn')
    `, [orderId, customerId]);

    if (!order.length) {
      return res.status(404).json({ 
        success: false,
        error: 'ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ·ªü tr·∫°ng th√°i ƒë∆∞·ª£c ho√†n ti·ªÅn' 
      });
    }

    const orderData = order[0];

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (!['Ch·ªù x·ª≠ l√Ω', 'ƒê√£ x√°c nh·∫≠n'].includes(orderData.tinhtrang)) {
      return res.status(400).json({ 
        success: false,
        error: 'Ch·ªâ c√≥ th·ªÉ ho√†n ti·ªÅn ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i "Ch·ªù x·ª≠ l√Ω" ho·∫∑c "ƒê√£ x√°c nh·∫≠n"' 
      });
    }

    // Ki·ªÉm tra s·ªë ti·ªÅn ho√†n
    if (refundAmount > orderData.TongTien) {
      return res.status(400).json({ 
        success: false,
        error: `S·ªë ti·ªÅn ho√†n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° t·ªïng ƒë∆°n h√†ng (${orderData.TongTien}ƒë)` 
      });
    }

    if (refundAmount < 1000) {
      return res.status(400).json({ 
        success: false,
        error: 'S·ªë ti·ªÅn ho√†n t·ªëi thi·ªÉu l√† 1.000ƒë' 
      });
    }

    const [existingRefund] = await pool.query(`
  SELECT id FROM refund_requests 
  WHERE orderId = ? AND status IN ('PENDING','PROCESSING')
`, [orderId]);

if (existingRefund.length > 0) {
  await pool.query(`
    UPDATE refund_requests
       SET bankAccount=?, bankName=?, accountHolder=?, bankBranch=?, refundReason=?, updatedAt=NOW()
     WHERE id=?
  `, [bankAccount, bankName, accountHolder,bankBranch || null, refundReason, existingRefund[0].id]);

  return res.json({ success: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin ho√†n ti·ªÅn th√†nh c√¥ng' });
}

    // T·∫°o m√£ y√™u c·∫ßu duy nh·∫•t
    const refundRequestId = `REF_${orderId}_${Date.now()}`;

    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();

      // L∆∞u y√™u c·∫ßu ho√†n ti·ªÅn
      const [result] = await connection.query(`
        INSERT INTO refund_requests 
        (orderId, customerId, refundRequestId, refundAmount, refundType, refundReason,
         bankAccount, bankName, accountHolder, bankBranch, status, createdAt, return_id) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'PENDING', NOW(), ?)
      `, [
        orderId, customerId, refundRequestId, refundAmount, refundType || 'full', 
        refundReason, bankAccount, bankName, accountHolder, bankBranch || null, null
      ]);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      await connection.query(`
        UPDATE hoadon 
        SET tinhtrang = 'ƒêang h·ªßy - ch·ªù ho√†n ti·ªÅn',
            GhiChu = CONCAT(IFNULL(GhiChu, ''), ?)
        WHERE MaHD = ?
      `, [`\n[${new Date().toLocaleString()}] Y√™u c·∫ßu ho√†n ti·ªÅn: ${refundRequestId}`, orderId]);

      await connection.commit();

      res.json({
        success: true,
        message: 'T·∫°o y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
        data: {
          refundRequestId,
          orderId,
          refundAmount,
          status: 'PENDING',
          estimatedProcessingTime: '1-3 ng√†y l√†m vi·ªác',
          bankAccount: `****${bankAccount.slice(-4)}`, // ·∫®n s·ªë t√†i kho·∫£n
          bankName,
          accountHolder
        }
      });

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('Create refund request error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng khi t·∫°o y√™u c·∫ßu ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});

// ‚úÖ API l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn c·ªßa kh√°ch h√†ng
router.get('/customer-refunds/logs/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;

  try {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (req.user.makh != customerId && req.user.userType !== 'admin') {
      return res.status(403).json({ 
        success: false,
        error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' 
      });
    }

    const [refunds] = await pool.query(`
      SELECT 
        rr.*,
        hd.NgayTao AS orderDate,
        hd.TongTien AS orderAmount,
        hd.tinhtrang AS orderStatus,
        kh.tenkh AS customerName,
        CASE rr.status
          WHEN 'PENDING' THEN 'Ch·ªù x·ª≠ l√Ω'
          WHEN 'PROCESSING' THEN 'ƒêang x·ª≠ l√Ω'
          WHEN 'COMPLETED' THEN 'ƒê√£ ho√†n ti·ªÅn'
          WHEN 'REJECTED' THEN 'T·ª´ ch·ªëi'
          WHEN 'CANCELLED' THEN 'ƒê√£ h·ªßy'
          ELSE 'Kh√¥ng x√°c ƒë·ªãnh'
        END AS statusDisplay,
        -- ·∫®n th√¥ng tin nh·∫°y c·∫£m
        CONCAT('****', RIGHT(rr.bankAccount, 4)) AS maskedBankAccount
      FROM refund_requests rr
      LEFT JOIN hoadon hd ON rr.orderId = hd.MaHD
      LEFT JOIN khachhang kh ON rr.customerId = kh.makh
      WHERE rr.customerId = ?
      ORDER BY rr.createdAt DESC
    `, [customerId]);

    const summary = {
      total: refunds.length,
      pending: refunds.filter(r => r.status === 'PENDING').length,
      processing: refunds.filter(r => r.status === 'PROCESSING').length,
      completed: refunds.filter(r => r.status === 'COMPLETED').length,
      rejected: refunds.filter(r => r.status === 'REJECTED').length,
      totalAmount: refunds.reduce((sum, r) => sum + parseFloat(r.refundAmount || 0), 0)
    };

    res.json({
      success: true,
      data: refunds,
      summary
    });

  } catch (error) {
    console.error('Get refund requests error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});
// ‚úÖ API admin l·∫•y t·∫•t c·∫£ y√™u c·∫ßu ho√†n ti·ªÅn
router.get('/refund-requests/admin', authenticateToken, async (req, res) => {
  try {
    // T·∫°m th·ªùi b·ªè check admin ƒë·ªÉ test
    // if (req.user.userType !== 'admin') {
    //   return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem' });
    // }

    const { status, page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    let whereClause = '';
    let params = [];

    if (status && status !== 'all') {
      whereClause = 'WHERE rr.status = ?';
      params.push(status);
    }

    const [refunds] = await pool.query(`
      SELECT 
        rr.*,
        hd.NgayTao AS orderDate,
        hd.TongTien AS orderAmount,
        hd.tinhtrang AS orderStatus,
        hd.PhuongThucThanhToan AS paymentMethod,
        kh.tenkh AS customerName,
        kh.sdt AS customerPhone,
        kh.email AS customerEmail,
        CASE rr.status
          WHEN 'PENDING' THEN 'Ch·ªù x·ª≠ l√Ω'
          WHEN 'PROCESSING' THEN 'ƒêang x·ª≠ l√Ω'
          WHEN 'COMPLETED' THEN 'ƒê√£ ho√†n ti·ªÅn'
          WHEN 'REJECTED' THEN 'T·ª´ ch·ªëi'
          WHEN 'CANCELLED' THEN 'ƒê√£ h·ªßy'
          ELSE 'Kh√¥ng x√°c ƒë·ªãnh'
        END AS statusDisplay
      FROM refund_requests rr
      LEFT JOIN hoadon hd ON rr.orderId = hd.MaHD
      LEFT JOIN khachhang kh ON rr.customerId = kh.makh
      ${whereClause}
      ORDER BY rr.createdAt DESC
      LIMIT ? OFFSET ?
    `, [...params, parseInt(limit), parseInt(offset)]);

    // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
    const [countResult] = await pool.query(`
      SELECT COUNT(*) as total 
      FROM refund_requests rr 
      ${whereClause}
    `, params);

    const summary = {
      total: countResult[0].total,
      currentPage: parseInt(page),
      totalPages: Math.ceil(countResult[0].total / limit),
      pending: refunds.filter(r => r.status === 'PENDING').length,
      processing: refunds.filter(r => r.status === 'PROCESSING').length,
      completed: refunds.filter(r => r.status === 'COMPLETED').length,
      rejected: refunds.filter(r => r.status === 'REJECTED').length,
      totalAmount: refunds.reduce((sum, r) => sum + parseFloat(r.refundAmount || 0), 0)
    };

    res.json({
      success: true,
      data: refunds,
      summary
    });

  } catch (error) {
    console.error('Get admin refund requests error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});
// ‚úÖ API admin x·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn
router.put('/refund-requests/:refundId/process', authenticateToken, async (req, res) => {
  const { refundId } = req.params;
  const { action, adminReason, actualRefundAmount, transactionId } = req.body;

  try {
    // T·∫°m th·ªùi b·ªè check admin ƒë·ªÉ test
    // if (req.user.userType !== 'admin') {
    //   return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x·ª≠ l√Ω' });
    // }

    if (!['approve', 'reject', 'complete'].includes(action)) {
      return res.status(400).json({ 
        success: false,
        error: 'Action kh√¥ng h·ª£p l·ªá (approve/reject/complete)' 
      });
    }

    // L·∫•y th√¥ng tin y√™u c·∫ßu ho√†n ti·ªÅn
    const [refundRequests] = await pool.query(`
      SELECT rr.*, hd.TongTien, hd.tinhtrang, hd.PhuongThucThanhToan
      FROM refund_requests rr
      LEFT JOIN hoadon hd ON rr.orderId = hd.MaHD
      WHERE rr.id = ?
    `, [refundId]);

    if (!refundRequests.length) {
      return res.status(404).json({ 
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn' 
      });
    }

    const refundRequest = refundRequests[0];

    if (!['PENDING', 'PROCESSING'].includes(refundRequest.status)) {
      return res.status(400).json({ 
        success: false,
        error: 'Y√™u c·∫ßu ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω' 
      });
    }

    const connection = await pool.getConnection();
    try {
      await connection.beginTransaction();

      let newStatus, orderStatus, paymentStatus;
      let updateData = {
        processedAt: new Date(),
        adminReason: adminReason || null
      };

      switch (action) {
        case 'approve':
          newStatus = 'PROCESSING';
          orderStatus = 'ƒêang h·ªßy - ƒë√£ duy·ªát ho√†n ti·ªÅn';
          updateData.status = newStatus;
          break;

        case 'reject':
          newStatus = 'REJECTED';
          orderStatus = 'Ch·ªù x·ª≠ l√Ω'; // Tr·∫£ v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
          updateData.status = newStatus;
          break;

        case 'complete':
          if (refundRequest.status !== 'PROCESSING') {
            throw new Error('Ch·ªâ c√≥ th·ªÉ ho√†n th√†nh y√™u c·∫ßu ƒëang x·ª≠ l√Ω');
          }
          if (!transactionId) {
            throw new Error('Thi·∫øu m√£ giao d·ªãch chuy·ªÉn ti·ªÅn');
          }
          
          newStatus = 'COMPLETED';
          orderStatus = 'ƒê√£ h·ªßy';
          paymentStatus = 'ƒê√£ ho√†n ti·ªÅn';
          
          updateData = {
            ...updateData,
            status: newStatus,
            actualRefundAmount: actualRefundAmount || refundRequest.refundAmount,
            transactionId,
            transferDate: new Date(),
            completedAt: new Date()
          };
          break;
      }

      // C·∫≠p nh·∫≠t y√™u c·∫ßu ho√†n ti·ªÅn
      const updateFields = Object.keys(updateData).map(key => `${key} = ?`).join(', ');
      const updateValues = Object.values(updateData);
      
      await connection.query(`
        UPDATE refund_requests 
        SET ${updateFields}
        WHERE id = ?
      `, [...updateValues, refundId]);

      // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
      let orderUpdateQuery = 'UPDATE hoadon SET tinhtrang = ?';
      let orderUpdateParams = [orderStatus];

      if (paymentStatus) {
        orderUpdateQuery += ', TrangThaiThanhToan = ?';
        orderUpdateParams.push(paymentStatus);
      }

      orderUpdateQuery += ', GhiChu = CONCAT(IFNULL(GhiChu, ""), ?) WHERE MaHD = ?';
      orderUpdateParams.push(
        `\n[${new Date().toLocaleString()}] Admin ${action}: ${adminReason || 'Kh√¥ng c√≥ ghi ch√∫'}`,
        refundRequest.orderId
      );

      await connection.query(orderUpdateQuery, orderUpdateParams);

      // N·∫øu t·ª´ ch·ªëi, ho√†n l·∫°i h√†ng v√†o kho (n·∫øu ch∆∞a ho√†n)
      if (action === 'reject') {
        await connection.query(`
          UPDATE sanpham sp 
          JOIN chitiethoadon ct ON sp.MaSP = ct.MaSP 
          SET sp.SoLuong = sp.SoLuong + ct.SoLuong 
          WHERE ct.MaHD = ?
        `, [refundRequest.orderId]);
      }

      await connection.commit();

      res.json({
        success: true,
        message: `${action === 'approve' ? 'Duy·ªát' : action === 'reject' ? 'T·ª´ ch·ªëi' : 'Ho√†n th√†nh'} y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng`,
        data: {
          refundId,
          status: newStatus,
          processedAt: updateData.processedAt,
          adminReason: updateData.adminReason,
          actualRefundAmount: updateData.actualRefundAmount,
          transactionId: updateData.transactionId
        }
      });

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('Process refund request error:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu ho√†n ti·ªÅn',
      details: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
});
// ...existing code...
router.put('/refund-requests/:refundId/cancel', authenticateToken, async (req, res) => {
    const { refundId } = req.params;
    const { reason } = req.body;
    const userId = req.user && req.user.makh;

    console.log('Cancel refund called:', { refundId, userId, body: req.body });

    try {
      // T√¨m refund b·∫±ng nhi·ªÅu c√°ch: rr.customerId OR hoadon.makh OR tra_hang.nguoi_tao
      const [rows] = await pool.query(`
        SELECT rr.*, hd.makh AS order_makh, t.nguoi_tao AS return_creator
        FROM refund_requests rr
        LEFT JOIN hoadon hd ON CAST(rr.orderId AS UNSIGNED) = hd.MaHD
        LEFT JOIN tra_hang t ON t.id = rr.return_id
        WHERE rr.id = ? AND (rr.customerId = ? OR hd.makh = ? OR t.nguoi_tao = ?)
      `, [refundId, userId, userId, String(userId)]);

      if (!rows.length) {
        console.warn('Cancel: refund not found or permission denied', { refundId, userId });
        return res.status(404).json({
          success: false,
          error: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho√†n ti·ªÅn ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy'
        });
      }

      const refundRequest = rows[0];
      console.log('Cancel: found refund', { id: refundRequest.id, status: refundRequest.status, return_id: refundRequest.return_id });

      if (refundRequest.status !== 'PENDING') {
        return res.status(400).json({
          success: false,
          error: 'Ch·ªâ c√≥ th·ªÉ h·ªßy y√™u c·∫ßu ho√†n ti·ªÅn ƒëang ch·ªù x·ª≠ l√Ω',
          currentStatus: refundRequest.status
        });
      }

      const connection = await pool.getConnection();
      try {
        await connection.beginTransaction();

        await connection.query(`
          UPDATE refund_requests
          SET status = 'CANCELLED',
              adminReason = ?,
              processedAt = NOW(),
              updatedAt = NOW()
          WHERE id = ?
        `, [reason || 'Kh√°ch h√†ng t·ª± h·ªßy y√™u c·∫ßu', refundId]);

        // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i hoadon v·ªÅ Ch·ªù x·ª≠ l√Ω (ho·∫∑c tr·∫°ng th√°i ph√π h·ª£p)
        await connection.query(`
          UPDATE hoadon
          SET tinhtrang = 'Ch·ªù x·ª≠ l√Ω',
              GhiChu = CONCAT(IFNULL(GhiChu, ''), ?)
          WHERE MaHD = ?
        `, [`\n[${new Date().toLocaleString()}] Kh√°ch h·ªßy y√™u c·∫ßu ho√†n ti·ªÅn: ${reason || 'Kh√¥ng c√≥ l√Ω do'}`, refundRequest.orderId]);

        await connection.commit();

        return res.json({
          success: true,
          message: 'H·ªßy y√™u c·∫ßu ho√†n ti·ªÅn th√†nh c√¥ng',
          data: { refundId, status: 'CANCELLED' }
        });
      } catch (err) {
        await connection.rollback();
        throw err;
      } finally {
        connection.release();
      }
    } catch (error) {
      console.error('Cancel refund request error:', error);
      return res.status(500).json({
        success: false,
        error: 'L·ªói khi h·ªßy y√™u c·∫ßu ho√†n ti·ªÅn',
        details: process.env.NODE_ENV === 'development' ? error.message : null
      });
    }
});

// ‚úÖ API l·∫•y danh s√°ch ƒë·ªãa ch·ªâ c≈© c·ªßa kh√°ch h√†ng
router.get('/customer-addresses/:customerId', authenticateToken, async (req, res) => {
  const { customerId } = req.params;
  try {
    const [addresses] = await pool.query(`
      SELECT 
        MaDiaChi AS id,
        TenNguoiNhan AS name,
        SDT AS phone,
        DiaChiChiTiet AS detail,
        TinhThanh AS province,
        QuanHuyen AS district,
        PhuongXa AS ward
      FROM diachi
      WHERE MaKH = ?
      ORDER BY MaDiaChi DESC
    `, [customerId]);
    // If the stored province/district/ward values are numeric codes, resolve them to human-readable names
    // Use a small in-memory cache to avoid repeated external calls during server runtime
    const provinceCache = new Map();
    const districtCache = new Map();
    const wardCache = new Map();

    async function resolveProvince(code) {
      if (!code) return '';
      if (!/^[0-9]+$/.test(String(code))) return String(code);
      if (provinceCache.has(code)) return provinceCache.get(code);
      try {
        const r = await fetch(`https://provinces.open-api.vn/api/p/${code}`);
        if (!r.ok) return String(code);
        const data = await r.json();
        const name = data.name || data['name'] || String(code);
        provinceCache.set(code, name);
        return name;
      } catch (e) {
        console.warn('resolveProvince error', e);
        return String(code);
      }
    }

    async function resolveDistrict(code) {
      if (!code) return '';
      if (!/^[0-9]+$/.test(String(code))) return String(code);
      if (districtCache.has(code)) return districtCache.get(code);
      try {
        const r = await fetch(`https://provinces.open-api.vn/api/d/${code}`);
        if (!r.ok) return String(code);
        const data = await r.json();
        const name = data.name || data['name'] || String(code);
        districtCache.set(code, name);
        return name;
      } catch (e) {
        console.warn('resolveDistrict error', e);
        return String(code);
      }
    }

    async function resolveWard(code) {
      if (!code) return '';
      if (!/^[0-9]+$/.test(String(code))) return String(code);
      if (wardCache.has(code)) return wardCache.get(code);
      try {
        // The API exposes wards via /w/{code}
        const r = await fetch(`https://provinces.open-api.vn/api/w/${code}`);
        if (!r.ok) return String(code);
        const data = await r.json();
        const name = data.name || data['name'] || String(code);
        wardCache.set(code, name);
        return name;
      } catch (e) {
        console.warn('resolveWard error', e);
        return String(code);
      }
    }

    // Resolve all addresses in parallel (with per-request caching)
    const resolved = await Promise.all(addresses.map(async addr => {
      const prov = await resolveProvince(addr.province);
      const dist = await resolveDistrict(addr.district);
      const ward = await resolveWard(addr.ward);
      return {
        id: addr.id,
        name: addr.name,
        phone: addr.phone,
        detail: addr.detail,
        province: prov,
        district: dist,
        ward: ward
      };
    }));

    res.json({ success: true, data: resolved });
  } catch (error) {
    console.error('L·ªói l·∫•y ƒë·ªãa ch·ªâ c≈©:', error);
    res.status(500).json({ success: false, error: 'L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ' });
  }
});


export default router;